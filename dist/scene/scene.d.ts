import { TgdPainter } from "../painter/painter";
import Asset from "./asset";
import TextureHelper from "./helpers/texture-helper";
import TgdInputs from "./inputs/inputs";
import Resources from "./resources";
export declare class TgdScene {
    readonly canvas: HTMLCanvasElement;
    readonly gl: WebGL2RenderingContext;
    readonly asset: Asset;
    readonly texture: TextureHelper;
    readonly inputs: TgdInputs;
    private readonly painters;
    private isAnimated;
    private lastCanvasWidth;
    private lastCanvasHeight;
    private lastTime;
    private _screenRatio;
    private requestAnimationFrame;
    constructor(canvas: HTMLCanvasElement, options?: WebGLContextAttributes);
    readonly requestFullscreen: (options?: FullscreenOptions) => Promise<void>;
    readonly toggleFullscreen: (options?: FullscreenOptions) => Promise<void>;
    getResources(id: string): Resources;
    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation;
    get screenRatio(): number;
    private set screenRatio(value);
    get width(): number;
    get height(): number;
    get animate(): boolean;
    set animate(value: boolean);
    addPainter(...painters: TgdPainter[]): Promise<void>;
    readonly paint: () => void;
    private readonly actualPaint;
    destroy(): void;
}
