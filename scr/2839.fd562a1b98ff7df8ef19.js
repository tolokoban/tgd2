"use strict";(self.webpackChunk_tolokoban_tgd=self.webpackChunk_tolokoban_tgd||[]).push([[2839],{2839:(e,n,t)=>{t.r(n),t.d(n,{default:()=>h});var r=t(4848),o=t(8453),a=t(6540),i=t(5968),l=t(2212),f=t(1238),s=t(6989),u=t(5345),c=t(4859);function d(e,n){var t,r,o;const a=new f.HTX(e);e.camera=new f.xNY({transfo:{distance:6},far:100,near:.01,fovy:Math.PI/4,zoom:1});const i=new f.K7(e,{textureColor0:new f.HTX(e)}),l=new f.K7(e,{textureColor0:new f.HTX(e)}),s=new f.D$w(e,{texture:null!==(t=l.textureColor0)&&void 0!==t?t:a,filters:[new f.HBr],flipY:!0}),u=new f.Ipk(e,{depth:f.Eg5.less,cull:f.TfJ.back,children:[s,new f.o57(e,{depth:1}),new f.dRj(e,{asset:n.glb.mesh,materialFactory:()=>new f.$Hl({color:new f.oao(1,.666,0),specularExponent:5,specularIntensity:2.5,light:new f.U5Z({color:new f.oao(1,1,1,1),direction:new f.hNi(1,0,0)}),ambient:new f.U5Z({color:new f.oao(.111,.333,.999,4)})})})]});i.add(u);const c=new f.ChJ({hueShiftInDegrees:2}),d=new f.HBr({zoom:1.007}),x=new f.D$w(e,{texture:null!==(r=i.textureColor0)&&void 0!==r?r:a,filters:[c,d],flipY:!0});l.add(x);const g=new f.D$w(e,{texture:null!==(o=i.textureColor0)&&void 0!==o?o:a,filters:[new f.HBr],flipY:!0});i.onExit=()=>{var e;x.texture=null!==(e=i.textureColor0)&&void 0!==e?e:a},l.onExit=()=>{var e,n;s.texture=null!==(e=l.textureColor0)&&void 0!==e?e:a,g.texture=null!==(n=l.textureColor0)&&void 0!==n?n:a},e.add(i,l,g,new f.ZJl((n=>{const{camera:t}=e;t.transfo.orbitAroundX(.03*Math.sin(.005045*n)),t.transfo.orbitAroundY(.02*Math.sin(.001751*n)),d.translation.x=.005*Math.sin(.0024581*n),d.translation.y=.005*Math.sin(.0037151*n)}))),e.play()}function x(){return(0,r.jsx)(s.A,{onReady:d,assets:{glb:{mesh:u},image:{background:c}}})}const g={"Detail #1":"    const defaultTexture = new TgdTexture2D(context)\n    context.camera = new TgdCameraPerspective({\n        transfo: { distance: 6 },\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI / 4,\n        zoom: 1,\n    })\n    const framebuffer1 = new TgdPainterFramebuffer(context, {\n        textureColor0: new TgdTexture2D(context),\n    })\n    const framebuffer2 = new TgdPainterFramebuffer(context, {\n        textureColor0: new TgdTexture2D(context),\n    })\n    const background = new TgdPainterFilter(context, {\n        texture: framebuffer2.textureColor0 ?? defaultTexture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        cull: webglPresetCull.back,\n        children: [\n            background,\n            new TgdPainterClear(context, {\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                materialFactory: () =>\n                    new TgdMaterialDiffuse({\n                        color: new TgdVec4(1, 0.666, 0),\n                        specularExponent: 5,\n                        specularIntensity: 2.5,\n                        light: new TgdLight({\n                            color: new TgdVec4(1, 1, 1, 1),\n                            direction: new TgdVec3(1, 0, 0),\n                        }),\n                        ambient: new TgdLight({\n                            color: new TgdVec4(0.111, 0.333, 0.999, 4),\n                        }),\n                    }),\n                // new TgdMaterialNormals(),\n            }),\n        ],\n    })\n    framebuffer1.add(painter)\n    const filterHue = new TgdFilterHueRotation({ hueShiftInDegrees: 2 })\n    const filterZoom = new TgdFilterZoom({ zoom: 1.007 })\n    const filters = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0 ?? defaultTexture,\n        filters: [filterHue, filterZoom],\n        flipY: true,\n    })\n    framebuffer2.add(filters)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0 ?? defaultTexture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    /**\n     * This is important because the texture of a framebuffer is recreated\n     * any time the screen size changes.\n     */\n    framebuffer1.onExit = () => {\n        filters.texture = framebuffer1.textureColor0 ?? defaultTexture\n    }\n    framebuffer2.onExit = () => {\n        background.texture = framebuffer2.textureColor0 ?? defaultTexture\n        screen.texture = framebuffer2.textureColor0 ?? defaultTexture\n    }\n    context.add(\n        framebuffer1,\n        framebuffer2,\n        screen,\n        new TgdPainterLogic(time => {\n            const { camera } = context\n            camera.transfo.orbitAroundX(Math.sin(time * 0.005045) * 0.03)\n            camera.transfo.orbitAroundY(Math.sin(time * 0.001751) * 0.02)\n            filterZoom.translation.x = 0.005 * Math.sin(time * 0.0024581)\n            filterZoom.translation.y = 0.005 * Math.sin(time * 0.0037151)\n        })\n    )\n    context.play()"},m='import {\n    TgdCameraPerspective,\n    TgdContext,\n    TgdFilterHueRotation,\n    TgdFilterZoom,\n    TgdLight,\n    TgdMaterialDiffuse,\n    TgdPainterClear,\n    TgdPainterFilter,\n    TgdPainterFramebuffer,\n    TgdPainterLogic,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdTexture2D,\n    TgdVec3,\n    TgdVec4,\n    webglPresetCull,\n    webglPresetDepth,\n} from "@tolokoban/tgd"\nimport View, { Assets } from "@/components/demo/Tgd"\n\nimport SuzanneURL from "@/assets/mesh/logo.glb"\nimport BackgroundURL from "@/assets/image/dino.webp"\n\nfunction init(context: TgdContext, assets: Assets) {\n    const defaultTexture = new TgdTexture2D(context)\n    context.camera = new TgdCameraPerspective({\n        transfo: { distance: 6 },\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI / 4,\n        zoom: 1,\n    })\n    const framebuffer1 = new TgdPainterFramebuffer(context, {\n        textureColor0: new TgdTexture2D(context),\n    })\n    const framebuffer2 = new TgdPainterFramebuffer(context, {\n        textureColor0: new TgdTexture2D(context),\n    })\n    const background = new TgdPainterFilter(context, {\n        texture: framebuffer2.textureColor0 ?? defaultTexture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        cull: webglPresetCull.back,\n        children: [\n            background,\n            new TgdPainterClear(context, {\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                materialFactory: () =>\n                    new TgdMaterialDiffuse({\n                        color: new TgdVec4(1, 0.666, 0),\n                        specularExponent: 5,\n                        specularIntensity: 2.5,\n                        light: new TgdLight({\n                            color: new TgdVec4(1, 1, 1, 1),\n                            direction: new TgdVec3(1, 0, 0),\n                        }),\n                        ambient: new TgdLight({\n                            color: new TgdVec4(0.111, 0.333, 0.999, 4),\n                        }),\n                    }),\n                // new TgdMaterialNormals(),\n            }),\n        ],\n    })\n    framebuffer1.add(painter)\n    const filterHue = new TgdFilterHueRotation({ hueShiftInDegrees: 2 })\n    const filterZoom = new TgdFilterZoom({ zoom: 1.007 })\n    const filters = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0 ?? defaultTexture,\n        filters: [filterHue, filterZoom],\n        flipY: true,\n    })\n    framebuffer2.add(filters)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0 ?? defaultTexture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    /**\n     * This is important because the texture of a framebuffer is recreated\n     * any time the screen size changes.\n     */\n    framebuffer1.onExit = () => {\n        filters.texture = framebuffer1.textureColor0 ?? defaultTexture\n    }\n    framebuffer2.onExit = () => {\n        background.texture = framebuffer2.textureColor0 ?? defaultTexture\n        screen.texture = framebuffer2.textureColor0 ?? defaultTexture\n    }\n    context.add(\n        framebuffer1,\n        framebuffer2,\n        screen,\n        new TgdPainterLogic(time => {\n            const { camera } = context\n            camera.transfo.orbitAroundX(Math.sin(time * 0.005045) * 0.03)\n            camera.transfo.orbitAroundY(Math.sin(time * 0.001751) * 0.02)\n            filterZoom.translation.x = 0.005 * Math.sin(time * 0.0024581)\n            filterZoom.translation.y = 0.005 * Math.sin(time * 0.0037151)\n        })\n    )\n    context.play()\n}\n\nexport default function Demo() {\n    return (\n        <View\n            onReady={init}\n            assets={{\n                glb: {\n                    mesh: SuzanneURL,\n                },\n                image: {\n                    background: BackgroundURL,\n                },\n            }}\n        />\n    )\n}\n';function T(){const[e,n]=a.useState(!1);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",{className:"half-left",children:(0,r.jsx)(x,{})}),(0,r.jsxs)("div",{className:"half-right",children:[(0,r.jsx)("div",{children:(0,r.jsx)(i.yQN,{variant:"elevated",onClick:()=>n(!e),children:e?"Show code details":"Show full code"})}),(0,r.jsx)(l.A,{language:"tsx",value:e?m:g})]})]})}function w(e){const n={a:"a",h1:"h1",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{children:[(0,r.jsx)(n.a,{href:"docs/classes/TgdPainterFramebuffer.html",children:"TgdPainterFramebuffer"})," - Example 1"]}),"\n",(0,r.jsx)(T,{})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(w,{...e})}):w(e)}},5345:(e,n,t)=>{e.exports=t.p+"bin/logo.f63fd222e8eb89f79227.glb"}}]);