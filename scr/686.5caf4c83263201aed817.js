"use strict";(self.webpackChunk_tolokoban_tgd=self.webpackChunk_tolokoban_tgd||[]).push([[686],{3686:(e,n,t)=>{t.r(n),t.d(n,{default:()=>b});var r=t(4848),a=t(8453),i=t(6540),o=t(8766),s=t(2261),f=t(9827),c=t(4088),l=t(7979);function d(e,n){e.camera=new f.xN({distance:6,far:100,near:.01,fovy:Math.PI/4,zoom:1});const t=new f.K7(e),r=new f.K7(e),a=new f.D$(e,{texture:r.texture,filters:[new f.HB],flipY:!0}),i=new f.Ip(e,{depth:f.Eg.less,cull:f.Tf.back,children:[a,new f.o5(e,{depth:1}),new f.dR(e,{asset:n.glb.mesh,materialFactory:()=>new f.$H({color:new f.o(1,.666,0),specularExponent:25,specularIntensity:1.5,light:new f.U5({color:new f.o(1,1,1,1),direction:new f.hN(1,0,0)}),ambient:new f.U5({color:new f.o(.111,.333,.999,2)})})})]});t.add(i);const o=new f.Ch({hueShiftInDegrees:2}),s=new f.D$(e,{texture:t.texture,filters:[o,new f.HB({zoom:1.005})],flipY:!0});r.add(s);const c=new f.D$(e,{texture:t.texture,filters:[new f.HB],flipY:!0});t.onExit=()=>s.texture=t.texture,r.onExit=()=>{a.texture=r.texture,c.texture=r.texture},e.add(t,r,c,new f.ZJ((n=>{const{camera:t}=e;t.orbitAroundX(.05*Math.sin(.005045*n)),t.orbitAroundY(.02*Math.sin(.001751*n)),t.setShift(Math.sin(.001414*n),0,1.2*Math.sin(.0020478*n))}))),e.play()}function u(){return(0,r.jsx)(c.A,{onReady:d,assets:{glb:{mesh:"/mesh/suzanne.glb"},image:{background:l}}})}const g={"Detail #1":"    context.camera = new TgdCameraPerspective({\n        distance: 6,\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI / 4,\n        zoom: 1,\n    })\n    // new TgdControllerCameraOrbit(context, {\n    //     speedPanning: 0,\n    //     inertiaOrbit: 1000,\n    // })\n    const framebuffer1 = new TgdPainterFramebuffer(context)\n    const framebuffer2 = new TgdPainterFramebuffer(context)\n    const background = new TgdPainterFilter(context, {\n        texture: framebuffer2.texture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        cull: webglPresetCull.back,\n        children: [\n            background,\n            new TgdPainterClear(context, {\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                materialFactory: () =>\n                    new TgdMaterialDiffuse({\n                        color: new TgdVec4(1, 0.666, 0),\n                        specularExponent: 25,\n                        specularIntensity: 1.5,\n                        light: new TgdLight({\n                            color: new TgdVec4(1, 1, 1, 1),\n                            direction: new TgdVec3(1, 0, 0),\n                        }),\n                        ambient: new TgdLight({\n                            color: new TgdVec4(0.111, 0.333, 0.999, 2),\n                        }),\n                    }),\n                // new TgdMaterialNormals(),\n            }),\n        ],\n    })\n    framebuffer1.add(painter)\n    const filter1 = new TgdFilterHueRotation({ hueShiftInDegrees: 2 })\n    const filters = new TgdPainterFilter(context, {\n        texture: framebuffer1.texture,\n        filters: [filter1, new TgdFilterZoom({ zoom: 1.005 })],\n        flipY: true,\n    })\n    framebuffer2.add(filters)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebuffer1.texture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    /**\n     * This is important because the texture of a framebuffer is recreated\n     * any time the screen size changes.\n     */\n    framebuffer1.onExit = () => (filters.texture = framebuffer1.texture)\n    framebuffer2.onExit = () => {\n        background.texture = framebuffer2.texture\n        screen.texture = framebuffer2.texture\n    }\n    context.add(\n        framebuffer1,\n        framebuffer2,\n        screen,\n        new TgdPainterLogic(time => {\n            const { camera } = context\n            camera.orbitAroundX(Math.sin(time * 0.005045) * 0.05)\n            camera.orbitAroundY(Math.sin(time * 0.001751) * 0.02)\n            camera.setShift(\n                Math.sin(time * 0.001414),\n                0,\n                Math.sin(time * 0.0020478) * 1.2\n            )\n        })\n    )\n    context.play()"},m='import {\n    TgdCameraPerspective,\n    TgdContext,\n    TgdControllerCameraOrbit,\n    TgdFilterHueRotation,\n    TgdFilterZoom,\n    TgdLight,\n    TgdMaterialDiffuse,\n    TgdMaterialGhost,\n    TgdMaterialNormals,\n    TgdPainterBackground,\n    TgdPainterClear,\n    TgdPainterFilter,\n    TgdPainterFramebuffer,\n    TgdPainterLogic,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdVec3,\n    TgdVec4,\n    webglPresetCull,\n    webglPresetDepth,\n} from "@tolokoban/tgd"\nimport View, { Assets } from "@/components/demo/Tgd"\n\nimport BackgroundURL from "@/gfx/image/dino.webp"\n\nfunction init(context: TgdContext, assets: Assets) {\n    context.camera = new TgdCameraPerspective({\n        distance: 6,\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI / 4,\n        zoom: 1,\n    })\n    // new TgdControllerCameraOrbit(context, {\n    //     speedPanning: 0,\n    //     inertiaOrbit: 1000,\n    // })\n    const framebuffer1 = new TgdPainterFramebuffer(context)\n    const framebuffer2 = new TgdPainterFramebuffer(context)\n    const background = new TgdPainterFilter(context, {\n        texture: framebuffer2.texture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        cull: webglPresetCull.back,\n        children: [\n            background,\n            new TgdPainterClear(context, {\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                materialFactory: () =>\n                    new TgdMaterialDiffuse({\n                        color: new TgdVec4(1, 0.666, 0),\n                        specularExponent: 25,\n                        specularIntensity: 1.5,\n                        light: new TgdLight({\n                            color: new TgdVec4(1, 1, 1, 1),\n                            direction: new TgdVec3(1, 0, 0),\n                        }),\n                        ambient: new TgdLight({\n                            color: new TgdVec4(0.111, 0.333, 0.999, 2),\n                        }),\n                    }),\n                // new TgdMaterialNormals(),\n            }),\n        ],\n    })\n    framebuffer1.add(painter)\n    const filter1 = new TgdFilterHueRotation({ hueShiftInDegrees: 2 })\n    const filters = new TgdPainterFilter(context, {\n        texture: framebuffer1.texture,\n        filters: [filter1, new TgdFilterZoom({ zoom: 1.005 })],\n        flipY: true,\n    })\n    framebuffer2.add(filters)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebuffer1.texture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    /**\n     * This is important because the texture of a framebuffer is recreated\n     * any time the screen size changes.\n     */\n    framebuffer1.onExit = () => (filters.texture = framebuffer1.texture)\n    framebuffer2.onExit = () => {\n        background.texture = framebuffer2.texture\n        screen.texture = framebuffer2.texture\n    }\n    context.add(\n        framebuffer1,\n        framebuffer2,\n        screen,\n        new TgdPainterLogic(time => {\n            const { camera } = context\n            camera.orbitAroundX(Math.sin(time * 0.005045) * 0.05)\n            camera.orbitAroundY(Math.sin(time * 0.001751) * 0.02)\n            camera.setShift(\n                Math.sin(time * 0.001414),\n                0,\n                Math.sin(time * 0.0020478) * 1.2\n            )\n        })\n    )\n    context.play()\n}\n\nexport default function Demo() {\n    return (\n        <View\n            onReady={init}\n            assets={{\n                glb: {\n                    // mesh: "/mesh/yin-yang.glb",\n                    mesh: "/mesh/suzanne.glb",\n                },\n                image: {\n                    background: BackgroundURL,\n                },\n            }}\n        />\n    )\n}\n';function x(){const[e,n]=i.useState(!1);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",{className:"half-left",children:(0,r.jsx)(u,{})}),(0,r.jsxs)("div",{className:"half-right",children:[(0,r.jsx)("div",{children:(0,r.jsx)(o.yQN,{variant:"elevated",onClick:()=>n(!e),children:e?"Show code details":"Show full code"})}),(0,r.jsx)(s.A,{language:"tsx",value:e?m:g})]})]})}function h(e){const n={a:"a",h1:"h1",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{children:[(0,r.jsx)(n.a,{href:"docs/classes/TgdPainterFramebuffer.html",children:"TgdPainterFramebuffer"})," - Example 1"]}),"\n",(0,r.jsx)(x,{})]})}function b(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);