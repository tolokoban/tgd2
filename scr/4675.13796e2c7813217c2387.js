"use strict";(self.webpackChunk_tolokoban_tgd=self.webpackChunk_tolokoban_tgd||[]).push([[4675],{4675:(n,e,t)=>{t.r(e),t.d(e,{default:()=>x});var a=t(4848),r=t(8453),o=t(6540),c=t(5968),l=t(2212),d=t(4461);function i(){return(0,a.jsx)("canvas",{ref:n=>{n&&function(n){const e=new d.tfp(n),t=new d.o57(e,{color:[1,.7,0,1]});e.add(t);let a=!1;n.addEventListener("click",(()=>{const n=(0,d.P11)({from:new d.hNi([t.red,t.green,t.blue]),to:new d.hNi([Math.random(),Math.random(),Math.random()]),action:([n,e,a])=>{t.red=n,t.green=e,t.blue=a}});e.animSchedule({duration:500,action:n,onEnd:()=>a=!0}),t.red=Math.random()+1,t.green=Math.random(),t.blue=Math.random(),e.paint()})),e.paint()}(n)},style:{width:"320px",height:"240px",background:"#000"}})}const s={"Detail #1":'function init(canvas: HTMLCanvasElement): TgdContext {\n    const ctx = new TgdContext(canvas)\n    const clear = new TgdPainterClear(ctx, { color: [1, 0.7, 0, 1] })\n    ctx.add(clear)\n    /**\n     * While transitioning to another color, we don\'t want the user\n     * to be able to click.\n     */\n    let enabled = false\n    canvas.addEventListener("click", () => {\n        /**\n         * On click, we want to interpolate to another random color.\n         */\n        const colorInterpolator = tgdActionCreateVec3Interpolation({\n            from: new TgdVec3([clear.red, clear.green, clear.blue]),\n            to: new TgdVec3([Math.random(), Math.random(), Math.random()]),\n            action: ([red, green, blue]) => {\n                clear.red = red\n                clear.green = green\n                clear.blue = blue\n            },\n        })\n        ctx.animSchedule({\n            duration: 500,\n            action: colorInterpolator,\n            onEnd: () => (enabled = true),\n        })\n        clear.red = Math.random() + 1\n        clear.green = Math.random()\n        clear.blue = Math.random()\n        ctx.paint()\n    })\n    ctx.paint()\n    return ctx\n}'},h='import {\n    tgdActionCreateVec3Interpolation,\n    TgdContext,\n    TgdPainterClear,\n    TgdVec3,\n} from "@tolokoban/tgd"\n\nfunction init(canvas: HTMLCanvasElement): TgdContext {\n    const ctx = new TgdContext(canvas)\n    const clear = new TgdPainterClear(ctx, { color: [1, 0.7, 0, 1] })\n    ctx.add(clear)\n    /**\n     * While transitioning to another color, we don\'t want the user\n     * to be able to click.\n     */\n    let enabled = false\n    canvas.addEventListener("click", () => {\n        /**\n         * On click, we want to interpolate to another random color.\n         */\n        const colorInterpolator = tgdActionCreateVec3Interpolation({\n            from: new TgdVec3([clear.red, clear.green, clear.blue]),\n            to: new TgdVec3([Math.random(), Math.random(), Math.random()]),\n            action: ([red, green, blue]) => {\n                clear.red = red\n                clear.green = green\n                clear.blue = blue\n            },\n        })\n        ctx.animSchedule({\n            duration: 500,\n            action: colorInterpolator,\n            onEnd: () => (enabled = true),\n        })\n        clear.red = Math.random() + 1\n        clear.green = Math.random()\n        clear.blue = Math.random()\n        ctx.paint()\n    })\n    ctx.paint()\n    return ctx\n}\n\nexport default function Demo() {\n    const handleMount = (canvas: HTMLCanvasElement | null) => {\n        if (canvas) init(canvas)\n    }\n    return (\n        <canvas\n            ref={handleMount}\n            style={{\n                width: "320px",\n                height: "240px",\n                background: "#000",\n            }}\n        ></canvas>\n    )\n}\n';function u(){const[n,e]=o.useState(!1);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{className:"half-left",children:(0,a.jsx)(i,{})}),(0,a.jsxs)("div",{className:"half-right",children:[(0,a.jsx)("div",{children:(0,a.jsx)(c.yQN,{variant:"elevated",onClick:()=>e(!n),children:n?"Show code details":"Show full code"})}),(0,a.jsx)(l.A,{language:"tsx",value:n?h:s})]})]})}function g(n){const e={a:"a",h1:"h1",h2:"h2",p:"p",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{children:(0,a.jsx)(e.a,{href:"docs/classes/TgdPainterClear.html",children:"TgdPainterClear"})}),"\n",(0,a.jsx)(e.p,{children:"How to fill all the pixels of the canvas with a unique color."}),"\n",(0,a.jsx)(e.h2,{children:"Example"}),"\n",(0,a.jsx)(e.p,{children:"Click the canvas (the rectangle below) to set an new random color."}),"\n",(0,a.jsx)(u,{})]})}function x(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(g,{...n})}):g(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o});var a=t(6540);const r=a.createContext({});function o(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}}}]);