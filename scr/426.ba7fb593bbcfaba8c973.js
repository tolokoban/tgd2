"use strict";(self.webpackChunk_tolokoban_tgd=self.webpackChunk_tolokoban_tgd||[]).push([[426],{2839:(e,n,t)=>{t.r(n),t.d(n,{default:()=>b});var r=t(4848),a=t(8453),o=t(6540),s=t(7402),i=t(9074),c=t(9199),l=t(7289),u=t(5345),f=t(4859);function d(e,n){const t=new c.HTX(e);e.camera=new c.xNY({transfo:{distance:6},far:100,near:.01,fovy:Math.PI/4,zoom:1});const r=new c.K7(e,{textureColor0:new c.HTX(e)}),a=new c.K7(e,{textureColor0:new c.HTX(e)}),o=new c.D$w(e,{texture:a.textureColor0??t,filters:[new c.HBr],flipY:!0}),s=new c.Ipk(e,{depth:c.Eg5.less,cull:c.TfJ.back,children:[o,new c.o57(e,{depth:1}),new c.dRj(e,{asset:n.glb.mesh,material:()=>new c.$Hl({color:new c.oao(1,.666,0),specularExponent:5,specularIntensity:2.5,light:new c.U5Z({color:new c.oao(1,1,1,1),direction:new c.hNi(1,0,0)}),ambient:new c.U5Z({color:new c.oao(.111,.333,.999,4)})})})]});r.add(s);const i=new c.ChJ({hueShiftInDegrees:2}),l=new c.HBr({zoom:1.007}),u=new c.D$w(e,{texture:r.textureColor0??t,filters:[i,l],flipY:!0});a.add(u);const f=new c.D$w(e,{texture:r.textureColor0??t,filters:[new c.HBr],flipY:!0});r.onExit=()=>{u.texture=r.textureColor0??t},a.onExit=()=>{o.texture=a.textureColor0??t,f.texture=a.textureColor0??t},e.add(r,a,f,new c.ZJl((n=>{const{camera:t}=e;t.transfo.orbitAroundX(.03*Math.sin(.005045*n)),t.transfo.orbitAroundY(.02*Math.sin(.001751*n)),l.translation.x=.005*Math.sin(.0024581*n),l.translation.y=.005*Math.sin(.0037151*n)}))),e.play()}function g(){return(0,r.jsx)(l.A,{onReady:d,assets:{glb:{mesh:u},image:{background:f}}})}const x={"Detail #1":"    const defaultTexture = new TgdTexture2D(context)\n    context.camera = new TgdCameraPerspective({\n        transfo: { distance: 6 },\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI / 4,\n        zoom: 1,\n    })\n    const framebuffer1 = new TgdPainterFramebuffer(context, {\n        textureColor0: new TgdTexture2D(context),\n    })\n    const framebuffer2 = new TgdPainterFramebuffer(context, {\n        textureColor0: new TgdTexture2D(context),\n    })\n    const background = new TgdPainterFilter(context, {\n        texture: framebuffer2.textureColor0 ?? defaultTexture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        cull: webglPresetCull.back,\n        children: [\n            background,\n            new TgdPainterClear(context, {\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                material: () =>\n                    new TgdMaterialDiffuse({\n                        color: new TgdVec4(1, 0.666, 0),\n                        specularExponent: 5,\n                        specularIntensity: 2.5,\n                        light: new TgdLight({\n                            color: new TgdVec4(1, 1, 1, 1),\n                            direction: new TgdVec3(1, 0, 0),\n                        }),\n                        ambient: new TgdLight({\n                            color: new TgdVec4(0.111, 0.333, 0.999, 4),\n                        }),\n                    }),\n                // new TgdMaterialNormals(),\n            }),\n        ],\n    })\n    framebuffer1.add(painter)\n    const filterHue = new TgdFilterHueRotation({ hueShiftInDegrees: 2 })\n    const filterZoom = new TgdFilterZoom({ zoom: 1.007 })\n    const filters = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0 ?? defaultTexture,\n        filters: [filterHue, filterZoom],\n        flipY: true,\n    })\n    framebuffer2.add(filters)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0 ?? defaultTexture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    /**\n     * This is important because the texture of a framebuffer is recreated\n     * any time the screen size changes.\n     */\n    framebuffer1.onExit = () => {\n        filters.texture = framebuffer1.textureColor0 ?? defaultTexture\n    }\n    framebuffer2.onExit = () => {\n        background.texture = framebuffer2.textureColor0 ?? defaultTexture\n        screen.texture = framebuffer2.textureColor0 ?? defaultTexture\n    }\n    context.add(\n        framebuffer1,\n        framebuffer2,\n        screen,\n        new TgdPainterLogic(time => {\n            const { camera } = context\n            camera.transfo.orbitAroundX(Math.sin(time * 0.005045) * 0.03)\n            camera.transfo.orbitAroundY(Math.sin(time * 0.001751) * 0.02)\n            filterZoom.translation.x = 0.005 * Math.sin(time * 0.0024581)\n            filterZoom.translation.y = 0.005 * Math.sin(time * 0.0037151)\n        })\n    )\n    context.play()"},m='import {\n    TgdCameraPerspective,\n    TgdContext,\n    TgdFilterHueRotation,\n    TgdFilterZoom,\n    TgdLight,\n    TgdMaterialDiffuse,\n    TgdPainterClear,\n    TgdPainterFilter,\n    TgdPainterFramebuffer,\n    TgdPainterLogic,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdTexture2D,\n    TgdVec3,\n    TgdVec4,\n    webglPresetCull,\n    webglPresetDepth,\n} from "@tolokoban/tgd"\nimport View, { Assets } from "@/components/demo/Tgd"\n\nimport SuzanneURL from "@/assets/mesh/logo.glb"\nimport BackgroundURL from "@/assets/image/dino.webp"\n\nfunction init(context: TgdContext, assets: Assets) {\n    const defaultTexture = new TgdTexture2D(context)\n    context.camera = new TgdCameraPerspective({\n        transfo: { distance: 6 },\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI / 4,\n        zoom: 1,\n    })\n    const framebuffer1 = new TgdPainterFramebuffer(context, {\n        textureColor0: new TgdTexture2D(context),\n    })\n    const framebuffer2 = new TgdPainterFramebuffer(context, {\n        textureColor0: new TgdTexture2D(context),\n    })\n    const background = new TgdPainterFilter(context, {\n        texture: framebuffer2.textureColor0 ?? defaultTexture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        cull: webglPresetCull.back,\n        children: [\n            background,\n            new TgdPainterClear(context, {\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                material: () =>\n                    new TgdMaterialDiffuse({\n                        color: new TgdVec4(1, 0.666, 0),\n                        specularExponent: 5,\n                        specularIntensity: 2.5,\n                        light: new TgdLight({\n                            color: new TgdVec4(1, 1, 1, 1),\n                            direction: new TgdVec3(1, 0, 0),\n                        }),\n                        ambient: new TgdLight({\n                            color: new TgdVec4(0.111, 0.333, 0.999, 4),\n                        }),\n                    }),\n                // new TgdMaterialNormals(),\n            }),\n        ],\n    })\n    framebuffer1.add(painter)\n    const filterHue = new TgdFilterHueRotation({ hueShiftInDegrees: 2 })\n    const filterZoom = new TgdFilterZoom({ zoom: 1.007 })\n    const filters = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0 ?? defaultTexture,\n        filters: [filterHue, filterZoom],\n        flipY: true,\n    })\n    framebuffer2.add(filters)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0 ?? defaultTexture,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    /**\n     * This is important because the texture of a framebuffer is recreated\n     * any time the screen size changes.\n     */\n    framebuffer1.onExit = () => {\n        filters.texture = framebuffer1.textureColor0 ?? defaultTexture\n    }\n    framebuffer2.onExit = () => {\n        background.texture = framebuffer2.textureColor0 ?? defaultTexture\n        screen.texture = framebuffer2.textureColor0 ?? defaultTexture\n    }\n    context.add(\n        framebuffer1,\n        framebuffer2,\n        screen,\n        new TgdPainterLogic(time => {\n            const { camera } = context\n            camera.transfo.orbitAroundX(Math.sin(time * 0.005045) * 0.03)\n            camera.transfo.orbitAroundY(Math.sin(time * 0.001751) * 0.02)\n            filterZoom.translation.x = 0.005 * Math.sin(time * 0.0024581)\n            filterZoom.translation.y = 0.005 * Math.sin(time * 0.0037151)\n        })\n    )\n    context.play()\n}\n\nexport default function Demo() {\n    return (\n        <View\n            onReady={init}\n            assets={{\n                glb: {\n                    mesh: SuzanneURL,\n                },\n                image: {\n                    background: BackgroundURL,\n                },\n            }}\n        />\n    )\n}\n';function h(){const[e,n]=o.useState(!1);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",{className:"half-left",children:(0,r.jsx)(g,{})}),(0,r.jsxs)("div",{className:"half-right",children:[(0,r.jsx)("div",{children:(0,r.jsx)(s.yQN,{variant:"elevated",onClick:()=>n(!e),children:e?"Show code details":"Show full code"})}),(0,r.jsx)(i.A,{language:"tsx",value:e?m:x})]})]})}function w(e){const n={a:"a",h1:"h1",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{children:[(0,r.jsx)(n.a,{href:"docs/classes/TgdPainterFramebuffer.html",children:"TgdPainterFramebuffer"})," - Example 1"]}),"\n",(0,r.jsx)(h,{})]})}function b(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(w,{...e})}):w(e)}},4859:(e,n,t)=>{e.exports=t.p+"img/dino.a892a1760dcaac9618a1.webp"},5345:(e,n,t)=>{e.exports=t.p+"bin/logo.f63fd222e8eb89f79227.glb"},7289:(e,n,t)=>{t.d(n,{A:()=>l});var r=t(4848),a=t(6540),o=t(9199),s=t(7402),i=t(3686);const c={Tgd:"hgIjhDQIuBCJEQ4ZgLXp",relative:"efOyHCihw9wfMB6AaAqw",overlay:"ywC8N0Uxbvm2Ug2DwPkE",loading:"PBWSRsbiwEqGpeL0hEfm",screen:"BErChOLWGtciKhh3IFud",canvas:"fT7FcYouYlPbElIAEXRP",gizmo:"uAPfWt_Dhe7RaRrnmIu0"};function l({className:e,options:n,onReady:t,gizmo:l=!1,width:u="640px",height:f="480px",noBorder:d=!1,assets:g,children:x}){const[m,h]=a.useState(!0),[w,b]=a.useState(!1),T=a.useRef(null),p=a.useRef(null),C=a.useRef(null),P=a.useRef(null),[v,y]=a.useState(!0);let j="auto";u.endsWith("px")&&f.endsWith("px")&&(u.substring(u.length-2),f.substring(f.length-2));const F=e=>{if(!e)return;if(p.current)return;p.current=e;const r=new o.tfp(e,n);T.current=r,y(!0),async function({glb:e,data:n,text:t,image:r}={}){console.log("🚀 [Tgd] glb, data, text, image = ",e,n,t,r);const a={glb:{},data:{},text:{},image:{}},s=[];return r&&Object.keys(r).forEach((e=>{s.push((async()=>{const n=r[e];console.log("Loading image:",n);const t=await(0,o.V_9)(n);t&&(a.image[e]=t)}))})),e&&Object.keys(e).forEach((n=>{s.push((async()=>{const t=e[n];console.log("Loading GLB:",t);const r=await(0,o.TCe)(t);r&&(a.glb[n]=r)}))})),n&&Object.keys(n).forEach((e=>{s.push((async()=>{const t=n[e],r=await(0,o.vSU)(t);r&&(a.data[e]=r)}))})),t&&Object.keys(t).forEach((e=>{s.push((async()=>{const n=t[e],r=await(0,o.jWq)(n);r&&(a.text[e]=r)}))})),await Promise.all(s.map((e=>e()))),a}(g).then((e=>{console.log("Ready!"),t(r,e),r.paint(),y(!1)})).catch((e=>{console.error("Unable to initialize the scene!",e),y(!1)}));const a=C.current;a&&a.attachContext(r)},k=e=>{const n=new o.GbF({canvas:e});C.current=n,n.eventTipClick.addListener((({to:e})=>{const n=T.current;console.log("🚀 [tgd] to, context =",e,n),n&&n.animSchedule({duration:.2,easingFunction:o.Wcc,action:(0,o.vRM)(n.camera,{orientation:e})})}));const t=T.current;t&&n.attachContext(t)};return a.useEffect((()=>{const e=p.current,n=T.current;if(!e||!n)return;const t=new ResizeObserver((()=>n.paint()));return t.observe(e),e.requestFullscreen||(e.requestFullscreen=e.webkitRequestFullscreen),b(Boolean(e.requestFullscreen)),()=>t.unobserve(e)}),[T.current,p.current]),d?(0,r.jsxs)("div",{ref:P,className:c.screen,style:{width:m?u:f,height:m?f:u},children:[(0,r.jsx)("canvas",{className:c.canvas,ref:F}),l&&(0,r.jsx)("canvas",{className:c.gizmo,ref:k})]}):(0,r.jsxs)("div",{className:s.Sxu.classNames.join(e,c.Tgd),children:[(0,r.jsxs)(s.sWC,{display:"flex",justifyContent:"space-between",children:[(0,r.jsx)(s.yQN,{variant:"elevated",onClick:()=>h(!m),enabled:!v,children:m?"Switch to Portrait":"Switch to Landscape"}),w&&(0,r.jsx)(s.yQN,{variant:"elevated",onClick:()=>{const e=P.current;e&&e.requestFullscreen()},enabled:!v,children:"Fullscreen"})]}),(0,r.jsxs)("div",{className:c.relative,children:[(0,r.jsxs)("div",{ref:P,className:c.screen,style:{width:m?u:f,height:m?f:u},children:[(0,r.jsx)("canvas",{className:c.canvas,ref:F}),l&&(0,r.jsx)("canvas",{className:c.gizmo,ref:k})]}),(0,r.jsx)("div",{className:s.Sxu.classNames.join(c.overlay,v&&c.loading),children:(0,r.jsx)(i.A,{})}),x]})]})}},8453:(e,n,t)=>{t.d(n,{R:()=>o});var r=t(6540);const a=r.createContext({});function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}}}]);