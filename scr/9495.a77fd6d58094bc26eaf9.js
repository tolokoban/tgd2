"use strict";(self.webpackChunk_tolokoban_tgd=self.webpackChunk_tolokoban_tgd||[]).push([[9495],{5166:(n,e,t)=>{t.r(e),t.d(e,{default:()=>f});var a=t(4848),o=t(8453),r=t(6540),s=t(5968),i=t(2212),l=t(4461),c=t(6989);const d=t.p+"bin/shield.b395cf0165ad25f85bac.glb",h=t.p+"img/background.81de42e9b532227029ac.png";function g(){return(0,a.jsx)(c.A,{onReady:u,assets:{image:{background:h},glb:{shield:d}}})}function u(n,e){const t=e.glb.shield,a=e.image.background,o=4096,r=o,{canvas:s,ctx:i}=(0,l.bj4)(o,r),c=new l.HTX(n).loadBitmap(s);i.clearRect(0,0,o,r);let d=0;window.setInterval((()=>{if(d>59)return i.clearRect(0,0,o,r),void(d=0);d++,i.fillStyle="#fff";const e=Math.random()*o,t=Math.random()*r,a=50+400*Math.random();i.beginPath(),i.ellipse(e,t,a,a,0,0,2*Math.PI),i.fill(),c.loadBitmap(s),n.paint()}),500),n.camera.transfo.distance=2.5;const h=new l.dRj(n,{asset:t,materialFactory:({color:n})=>{if(!n)throw Error("No abedo provided!");return new m({abedo:n,holes:c})}}),g=new l.pwt(n,{inertiaOrbit:500});n.add(new l.Ipk(n,{depth:l.Eg5.less,blend:l.aMr.alpha,children:[new l.o57(n,{color:new l.oao(.5,.5,.5,1),depth:1}),new l.b6h(n,{texture:new l.HTX(n).loadBitmap(a)}),h]})),n.paint(),n.canvas.addEventListener("dblclick",(()=>{g.reset(300)}))}class m{constructor(n){this.options=n,this.lightDirection=new l.hNi(.1,.2,1),this.varyings={varNormal:"vec3",varUV:"vec2"},this.uniforms={texAbedo:"sampler2D",texHoles:"sampler2D",uniLightDir:"vec3"},this.fragmentShaderCode=["vec3 normal = normalize(varNormal);","float light = abs(dot(normal, uniLightDir));","light = pow(light, 9.0) * 0.9;","light += 0.2;","vec3 color = texture(texAbedo, varUV).rgb;","float spec = max(0.0, reflect(uniLightDir, normal).z);","spec = pow(spec, 20.0);","vec3 holes = texture(texHoles, varUV).rgb;","if (holes.r > 0.99) discard;","return vec4(color * light + spec + holes * 0.25, 1.0 - holes.r);"],this.vertexShaderCode=["varNormal = mat3(uniModelViewMatrix) * NORMAL;","varUV = TEXCOORD_0;"]}setUniforms(n){n.uniform3fv("uniLightDir",this.lightDirection),this.options.abedo.activate(0,n,"texAbedo"),this.options.holes.activate(1,n,"texHoles")}}const p={"Initialising WebGL":'function init(context: TgdContext, assets: Assets) {\n    const asset = assets.glb.shield\n    const background = assets.image.background\n\n    const w = 4096\n    const h = w\n    const { canvas, ctx } = tgdCanvasCreateWithContext2D(w, h)\n    const holes = new TgdTexture2D(context).loadBitmap(canvas)\n    ctx.clearRect(0, 0, w, h)\n    let count = 0\n    window.setInterval(() => {\n        if (count > 59) {\n            ctx.clearRect(0, 0, w, h)\n            count = 0\n            return\n        }\n\n        count++\n        ctx.fillStyle = "#fff"\n        const x = Math.random() * w\n        const y = Math.random() * h\n        const r = 50 + 400 * Math.random()\n        ctx.beginPath()\n        ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2)\n        ctx.fill()\n        holes.loadBitmap(canvas)\n        context.paint()\n    }, 500)\n    context.camera.transfo.distance = 2.5\n    const painter = new TgdPainterMeshGltf(context, {\n        asset,\n        materialFactory: ({ color }: { color?: TgdTexture2D }) => {\n            if (!color) throw Error("No abedo provided!")\n\n            return new MaterialHole({ abedo: color, holes })\n        },\n    })\n    const orbiter = new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 500,\n    })\n    context.add(\n        new TgdPainterState(context, {\n            depth: webglPresetDepth.less,\n            blend: webglPresetBlend.alpha,\n            children: [\n                new TgdPainterClear(context, {\n                    color: new TgdVec4(0.5, 0.5, 0.5, 1),\n                    depth: 1,\n                }),\n                new TgdPainterBackground(context, {\n                    texture: new TgdTexture2D(context).loadBitmap(background),\n                }),\n                painter,\n            ],\n        })\n    )\n    context.paint()\n    context.canvas.addEventListener("dblclick", () => {\n        orbiter.reset(300)\n    })\n}',"Class MaterialHole":'interface MaterialHoleOptions {\n    abedo: TgdTexture2D\n    holes: TgdTexture2D\n}\n\nclass MaterialHole implements TgdMaterial {\n    private readonly lightDirection = new TgdVec3(0.1, 0.2, 1)\n\n    public readonly varyings: { [name: string]: WebglAttributeType } = {\n        varNormal: "vec3",\n        varUV: "vec2",\n    }\n    public readonly uniforms: { [name: string]: WebglUniformType } = {\n        texAbedo: "sampler2D",\n        texHoles: "sampler2D",\n        uniLightDir: "vec3",\n    }\n    public readonly fragmentShaderCode = [\n        "vec3 normal = normalize(varNormal);",\n        `float light = abs(dot(normal, uniLightDir));`,\n        `light = pow(light, 9.0) * 0.9;`,\n        `light += 0.2;`,\n        `vec3 color = texture(texAbedo, varUV).rgb;`,\n        `float spec = max(0.0, reflect(uniLightDir, normal).z);`,\n        `spec = pow(spec, 20.0);`,\n        `vec3 holes = texture(texHoles, varUV).rgb;`,\n        `if (holes.r > 0.99) discard;`,\n        `return vec4(color * light + spec + holes * 0.25, 1.0 - holes.r);`,\n    ]\n    public readonly vertexShaderCode = [\n        "varNormal = mat3(uniModelViewMatrix) * NORMAL;",\n        "varUV = TEXCOORD_0;",\n    ]\n\n    constructor(private readonly options: MaterialHoleOptions) {}\n\n    setUniforms(program: TgdProgram): void {\n        program.uniform3fv("uniLightDir", this.lightDirection)\n\n        this.options.abedo.activate(0, program, "texAbedo")\n        this.options.holes.activate(1, program, "texHoles")\n    }\n}'},x='import * as React from "react"\nimport {\n    tgdCanvasCreateWithContext2D,\n    TgdContext,\n    TgdControllerCameraOrbit,\n    TgdMaterial,\n    TgdPainterBackground,\n    TgdPainterClear,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdProgram,\n    TgdTexture2D,\n    TgdVec3,\n    TgdVec4,\n    WebglAttributeType,\n    webglPresetBlend,\n    webglPresetDepth,\n    WebglUniformType,\n} from "@tolokoban/tgd"\n\nimport View, { Assets } from "@/components/demo/Tgd"\nimport AssetGlb from "../assets/shield.glb"\nimport AssetBackground from "../assets/background.png"\n\nexport default function ViewShield(): JSX.Element {\n    return (\n        <View\n            onReady={init}\n            assets={{\n                image: {\n                    background: AssetBackground,\n                },\n                glb: {\n                    shield: AssetGlb,\n                },\n            }}\n        />\n    )\n}\n\nfunction init(context: TgdContext, assets: Assets) {\n    const asset = assets.glb.shield\n    const background = assets.image.background\n\n    const w = 4096\n    const h = w\n    const { canvas, ctx } = tgdCanvasCreateWithContext2D(w, h)\n    const holes = new TgdTexture2D(context).loadBitmap(canvas)\n    ctx.clearRect(0, 0, w, h)\n    let count = 0\n    window.setInterval(() => {\n        if (count > 59) {\n            ctx.clearRect(0, 0, w, h)\n            count = 0\n            return\n        }\n\n        count++\n        ctx.fillStyle = "#fff"\n        const x = Math.random() * w\n        const y = Math.random() * h\n        const r = 50 + 400 * Math.random()\n        ctx.beginPath()\n        ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2)\n        ctx.fill()\n        holes.loadBitmap(canvas)\n        context.paint()\n    }, 500)\n    context.camera.transfo.distance = 2.5\n    const painter = new TgdPainterMeshGltf(context, {\n        asset,\n        materialFactory: ({ color }: { color?: TgdTexture2D }) => {\n            if (!color) throw Error("No abedo provided!")\n\n            return new MaterialHole({ abedo: color, holes })\n        },\n    })\n    const orbiter = new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 500,\n    })\n    context.add(\n        new TgdPainterState(context, {\n            depth: webglPresetDepth.less,\n            blend: webglPresetBlend.alpha,\n            children: [\n                new TgdPainterClear(context, {\n                    color: new TgdVec4(0.5, 0.5, 0.5, 1),\n                    depth: 1,\n                }),\n                new TgdPainterBackground(context, {\n                    texture: new TgdTexture2D(context).loadBitmap(background),\n                }),\n                painter,\n            ],\n        })\n    )\n    context.paint()\n    context.canvas.addEventListener("dblclick", () => {\n        orbiter.reset(300)\n    })\n}\n\ninterface MaterialHoleOptions {\n    abedo: TgdTexture2D\n    holes: TgdTexture2D\n}\n\nclass MaterialHole implements TgdMaterial {\n    private readonly lightDirection = new TgdVec3(0.1, 0.2, 1)\n\n    public readonly varyings: { [name: string]: WebglAttributeType } = {\n        varNormal: "vec3",\n        varUV: "vec2",\n    }\n    public readonly uniforms: { [name: string]: WebglUniformType } = {\n        texAbedo: "sampler2D",\n        texHoles: "sampler2D",\n        uniLightDir: "vec3",\n    }\n    public readonly fragmentShaderCode = [\n        "vec3 normal = normalize(varNormal);",\n        `float light = abs(dot(normal, uniLightDir));`,\n        `light = pow(light, 9.0) * 0.9;`,\n        `light += 0.2;`,\n        `vec3 color = texture(texAbedo, varUV).rgb;`,\n        `float spec = max(0.0, reflect(uniLightDir, normal).z);`,\n        `spec = pow(spec, 20.0);`,\n        `vec3 holes = texture(texHoles, varUV).rgb;`,\n        `if (holes.r > 0.99) discard;`,\n        `return vec4(color * light + spec + holes * 0.25, 1.0 - holes.r);`,\n    ]\n    public readonly vertexShaderCode = [\n        "varNormal = mat3(uniModelViewMatrix) * NORMAL;",\n        "varUV = TEXCOORD_0;",\n    ]\n\n    constructor(private readonly options: MaterialHoleOptions) {}\n\n    setUniforms(program: TgdProgram): void {\n        program.uniform3fv("uniLightDir", this.lightDirection)\n\n        this.options.abedo.activate(0, program, "texAbedo")\n        this.options.holes.activate(1, program, "texHoles")\n    }\n}\n';function b(){const[n,e]=r.useState(!1);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{className:"half-left",children:(0,a.jsx)(g,{})}),(0,a.jsxs)("div",{className:"half-right",children:[(0,a.jsx)("div",{children:(0,a.jsx)(s.yQN,{variant:"elevated",onClick:()=>e(!n),children:n?"Show code details":"Show full code"})}),(0,a.jsx)(i.A,{language:"tsx",value:n?x:p})]})]})}function v(n){const e={h1:"h1",p:"p",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{children:"Punching holes in a shield"}),"\n",(0,a.jsx)(e.p,{children:"In this example, we randomly punch some holes in a mesh. For this, we use two\ntextures: one for the abedo of the mesh, and another one for the holes."}),"\n",(0,a.jsx)(e.p,{children:"As usual, you can move the shield with your pointer."}),"\n",(0,a.jsx)(b,{})]})}function f(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(v,{...n})}):v(n)}},3469:(n,e,t)=>{t.d(e,{A:()=>i});var a=t(1601),o=t.n(a),r=t(6314),s=t.n(r)()(o());s.push([n.id,".hgIjhDQIuBCJEQ4ZgLXp {\n    display: inline-block;\n    margin: 1em;\n}\n\n.hgIjhDQIuBCJEQ4ZgLXp canvas {\n    box-shadow: 0 0.25em 0.5em #fff1;\n    max-width: 100vw;\n    max-height: 100vh;\n}\n\n.efOyHCihw9wfMB6AaAqw {\n    position: relative;\n}\n\n.ywC8N0Uxbvm2Ug2DwPkE {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    background-color: var(--theme-color-primary-1);\n    opacity: 0;\n    transition: opacity 0.3s;\n}\n\n.ywC8N0Uxbvm2Ug2DwPkE.PBWSRsbiwEqGpeL0hEfm {\n    opacity: 1;\n}\n\n.BErChOLWGtciKhh3IFud {\n    position: relative;    \n}\n\n.BErChOLWGtciKhh3IFud > canvas.fT7FcYouYlPbElIAEXRP {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n\n.BErChOLWGtciKhh3IFud > canvas.uAPfWt_Dhe7RaRrnmIu0 {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 128px;\n    height: 128px;\n    box-shadow: none;\n    border: none;\n}",""]),s.locals={Tgd:"hgIjhDQIuBCJEQ4ZgLXp",relative:"efOyHCihw9wfMB6AaAqw",overlay:"ywC8N0Uxbvm2Ug2DwPkE",loading:"PBWSRsbiwEqGpeL0hEfm",screen:"BErChOLWGtciKhh3IFud",canvas:"fT7FcYouYlPbElIAEXRP",gizmo:"uAPfWt_Dhe7RaRrnmIu0"};const i=s},6989:(n,e,t)=>{t.d(e,{A:()=>C});var a=t(4848),o=t(6540),r=t(4461),s=t(5968),i=t(5670),l=t(5072),c=t.n(l),d=t(7825),h=t.n(d),g=t(7659),u=t.n(g),m=t(5056),p=t.n(m),x=t(540),b=t.n(x),v=t(1113),f=t.n(v),w=t(3469),T={};T.styleTagTransform=f(),T.setAttributes=p(),T.insert=u().bind(null,"head"),T.domAPI=h(),T.insertStyleElement=b(),c()(w.A,T);const y=w.A&&w.A.locals?w.A.locals:void 0;function C({className:n,options:e,onReady:t,gizmo:l=!1,width:c="640px",height:d="480px",noBorder:h=!1,assets:g,children:u}){const[m,p]=o.useState(!0),[x,b]=o.useState(!1),v=o.useRef(null),f=o.useRef(null),w=o.useRef(null),T=o.useRef(null),[C,D]=o.useState(!0);let A="auto";c.endsWith("px")&&d.endsWith("px")&&(c.substring(c.length-2),d.substring(d.length-2));const P=n=>{if(!n)return;if(f.current)return;f.current=n;const a=new r.tfp(n,e);v.current=a,D(!0),async function({glb:n,data:e,text:t,image:a}={}){console.log("🚀 [Tgd] glb, data, text, image = ",n,e,t,a);const o={glb:{},data:{},text:{},image:{}},s=[];return a&&Object.keys(a).forEach((n=>{s.push((async()=>{const e=a[n];console.log("Loading image:",e);const t=await(0,r.V_9)(e);t&&(o.image[n]=t)}))})),n&&Object.keys(n).forEach((e=>{s.push((async()=>{const t=n[e];console.log("Loading GLB:",t);const a=await(0,r.TCe)(t);a&&(o.glb[e]=a)}))})),e&&Object.keys(e).forEach((n=>{s.push((async()=>{const t=e[n],a=await(0,r.vSU)(t);a&&(o.data[n]=a)}))})),t&&Object.keys(t).forEach((n=>{s.push((async()=>{const e=t[n],a=await(0,r.jWq)(e);a&&(o.text[n]=a)}))})),await Promise.all(s.map((n=>n()))),o}(g).then((n=>{console.log("Ready!"),t(a,n),a.paint(),D(!1)})).catch((n=>{console.error("Unable to initialize the scene!",n),D(!1)}));const o=w.current;o&&o.attachContext(a)},j=n=>{const e=new r.GbF({canvas:n});w.current=e,e.eventTipClick.addListener((({to:n})=>{const e=v.current;console.log("🚀 [tgd] to, context =",n,e),e&&e.animSchedule({duration:.2,easingFunction:r.Wcc,action:(0,r.vRM)(e.camera,{orientation:n})})}));const t=v.current;t&&e.attachContext(t)};return o.useEffect((()=>{const n=f.current,e=v.current;if(!n||!e)return;const t=new ResizeObserver((()=>e.paint()));return t.observe(n),n.requestFullscreen||(n.requestFullscreen=n.webkitRequestFullscreen),b(Boolean(n.requestFullscreen)),()=>t.unobserve(n)}),[v.current,f.current]),h?(0,a.jsxs)("div",{ref:T,className:y.screen,style:{width:m?c:d,height:m?d:c},children:[(0,a.jsx)("canvas",{className:y.canvas,ref:P}),l&&(0,a.jsx)("canvas",{className:y.gizmo,ref:j})]}):(0,a.jsxs)("div",{className:s.Sxu.classNames.join(n,y.Tgd),children:[(0,a.jsxs)(s.sWC,{display:"flex",justifyContent:"space-between",children:[(0,a.jsx)(s.yQN,{variant:"elevated",onClick:()=>p(!m),enabled:!C,children:m?"Switch to Portrait":"Switch to Landscape"}),x&&(0,a.jsx)(s.yQN,{variant:"elevated",onClick:()=>{const n=T.current;n&&n.requestFullscreen()},enabled:!C,children:"Fullscreen"})]}),(0,a.jsxs)("div",{className:y.relative,children:[(0,a.jsxs)("div",{ref:T,className:y.screen,style:{width:m?c:d,height:m?d:c},children:[(0,a.jsx)("canvas",{className:y.canvas,ref:P}),l&&(0,a.jsx)("canvas",{className:y.gizmo,ref:j})]}),(0,a.jsx)("div",{className:s.Sxu.classNames.join(y.overlay,C&&y.loading),children:(0,a.jsx)(i.A,{})}),u]})]})}},8453:(n,e,t)=>{t.d(e,{R:()=>r});var a=t(6540);const o=a.createContext({});function r(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}}}]);