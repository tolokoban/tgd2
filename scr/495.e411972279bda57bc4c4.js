"use strict";(self.webpackChunk_tolokoban_tgd=self.webpackChunk_tolokoban_tgd||[]).push([[495],{5166:(e,n,t)=>{t.r(n),t.d(n,{default:()=>v});var a=t(4848),r=t(8453),o=t(6540),i=t(8766),s=t(2212),l=t(7556),c=t(6281);const d=t.p+"bin/shield.b395cf0165ad25f85bac.glb",g=t.p+"img/background.81de42e9b532227029ac.png";function u(){return(0,a.jsx)(c.A,{onReady:m,assets:{image:{background:g},glb:{shield:d}}})}function m(e,n){const t=n.glb.shield,a=n.image.background,r=4096,o=r,{canvas:i,ctx:s}=(0,l.bj)(r,o),c=e.textures2D.create({image:i});s.clearRect(0,0,r,o);let d=0;window.setInterval((()=>{if(d>59)return s.clearRect(0,0,r,o),void(d=0);d++,s.fillStyle="#fff";const n=Math.random()*r,t=Math.random()*o,a=50+400*Math.random();s.beginPath(),s.ellipse(n,t,a,a,0,0,2*Math.PI),s.fill(),c.loadImage(i),e.paint()}),500),e.camera.distance=2.5;const g=new l.dR(e,{asset:t,materialFactory:({color:e})=>{if(!e)throw Error("No abedo provided!");return new h({abedo:e,holes:c})}}),u=new l.pw(e,{inertiaOrbit:500});e.add(new l.Ip(e,{depth:l.Eg.less,blend:l.aM.alpha,children:[new l.o5(e,{color:new l.o(.5,.5,.5,1),depth:1}),new l.b6(e,e.textures2D.create({image:a})),g]})),g.paint(),e.canvas.addEventListener("dblclick",(()=>{u.reset(300)}))}class h{constructor(e){this.options=e,this.lightDirection=new l.hN(.1,.2,1),this.varyings={varNormal:"vec3",varUV:"vec2"},this.uniforms={texAbedo:"sampler2D",texHoles:"sampler2D",uniLightDir:"vec3"},this.fragmentShaderCode=["vec3 normal = normalize(varNormal);","float light = abs(dot(normal, uniLightDir));","light = pow(light, 9.0) * 0.9;","light += 0.2;","vec3 color = texture(texAbedo, varUV).rgb;","float spec = max(0.0, reflect(uniLightDir, normal).z);","spec = pow(spec, 20.0);","vec3 holes = texture(texHoles, varUV).rgb;","if (holes.r > 0.99) discard;","return vec4(color * light + spec + holes * 0.25, 1.0 - holes.r);"],this.vertexShaderCode=["varNormal = mat3(uniModelViewMatrix) * NORMAL;","varUV = TEXCOORD_0;"]}setUniforms(e){e.uniform3fv("uniLightDir",this.lightDirection),this.options.abedo.activate(e,"texAbedo",0),this.options.holes.activate(e,"texHoles",1)}}const p={"Initialising WebGL":'function init(context: TgdContext, assets: Assets) {\n    const asset = assets.glb.shield\n    const background = assets.image.background\n\n    const w = 4096\n    const h = w\n    const { canvas, ctx } = tgdCanvasCreateWithContext2D(w, h)\n    const holes = context.textures2D.create({\n        image: canvas,\n    })\n    ctx.clearRect(0, 0, w, h)\n    let count = 0\n    window.setInterval(() => {\n        if (count > 59) {\n            ctx.clearRect(0, 0, w, h)\n            count = 0\n            return\n        }\n\n        count++\n        ctx.fillStyle = "#fff"\n        const x = Math.random() * w\n        const y = Math.random() * h\n        const r = 50 + 400 * Math.random()\n        ctx.beginPath()\n        ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2)\n        ctx.fill()\n        holes.loadImage(canvas)\n        context.paint()\n    }, 500)\n    context.camera.distance = 2.5\n    const painter = new TgdPainterMeshGltf(context, {\n        asset,\n        materialFactory: ({ color }: { color?: TgdTexture2D }) => {\n            if (!color) throw Error("No abedo provided!")\n\n            return new MaterialHole({ abedo: color, holes })\n        },\n    })\n    const orbiter = new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 500,\n    })\n    context.add(\n        new TgdPainterState(context, {\n            depth: webglPresetDepth.less,\n            blend: webglPresetBlend.alpha,\n            children: [\n                new TgdPainterClear(context, {\n                    color: new TgdVec4(0.5, 0.5, 0.5, 1),\n                    depth: 1,\n                }),\n                new TgdPainterBackground(\n                    context,\n                    context.textures2D.create({\n                        image: background,\n                    })\n                ),\n                painter,\n            ],\n        })\n    )\n    painter.paint()\n    context.canvas.addEventListener("dblclick", () => {\n        orbiter.reset(300)\n    })\n}',"Class MaterialHole":'interface MaterialHoleOptions {\n    abedo: TgdTexture2D\n    holes: TgdTexture2D\n}\n\nclass MaterialHole implements TgdMaterial {\n    private readonly lightDirection = new TgdVec3(0.1, 0.2, 1)\n\n    public readonly varyings: { [name: string]: WebglAttributeType } = {\n        varNormal: "vec3",\n        varUV: "vec2",\n    }\n    public readonly uniforms: { [name: string]: WebglUniformType } = {\n        texAbedo: "sampler2D",\n        texHoles: "sampler2D",\n        uniLightDir: "vec3",\n    }\n    public readonly fragmentShaderCode = [\n        "vec3 normal = normalize(varNormal);",\n        `float light = abs(dot(normal, uniLightDir));`,\n        `light = pow(light, 9.0) * 0.9;`,\n        `light += 0.2;`,\n        `vec3 color = texture(texAbedo, varUV).rgb;`,\n        `float spec = max(0.0, reflect(uniLightDir, normal).z);`,\n        `spec = pow(spec, 20.0);`,\n        `vec3 holes = texture(texHoles, varUV).rgb;`,\n        `if (holes.r > 0.99) discard;`,\n        `return vec4(color * light + spec + holes * 0.25, 1.0 - holes.r);`,\n    ]\n    public readonly vertexShaderCode = [\n        "varNormal = mat3(uniModelViewMatrix) * NORMAL;",\n        "varUV = TEXCOORD_0;",\n    ]\n\n    constructor(private readonly options: MaterialHoleOptions) {}\n\n    setUniforms(program: TgdProgram): void {\n        program.uniform3fv("uniLightDir", this.lightDirection)\n\n        this.options.abedo.activate(program, "texAbedo", 0)\n        this.options.holes.activate(program, "texHoles", 1)\n    }\n}'},f='import * as React from "react"\nimport { Theme, CommonProps, styleCommon } from "@tolokoban/ui"\nimport {\n    tgdCanvasCreateWithContext2D,\n    TgdContext,\n    TgdControllerCameraOrbit,\n    tgdLoadGlb,\n    tgdLoadImage,\n    TgdMaterial,\n    TgdPainterBackground,\n    TgdPainterClear,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdProgram,\n    TgdTexture2D,\n    TgdVec3,\n    TgdVec4,\n    WebglAttributeType,\n    webglPresetBlend,\n    webglPresetDepth,\n    WebglUniformType,\n} from "@tolokoban/tgd"\n\nimport View, { Assets } from "@/components/demo/Tgd"\nimport AssetGlb from "../assets/shield.glb"\nimport AssetBackground from "../assets/background.png"\n\nexport default function ViewShield(): JSX.Element {\n    return (\n        <View\n            onReady={init}\n            assets={{\n                image: {\n                    background: AssetBackground,\n                },\n                glb: {\n                    shield: AssetGlb,\n                },\n            }}\n        />\n    )\n}\n\nfunction init(context: TgdContext, assets: Assets) {\n    const asset = assets.glb.shield\n    const background = assets.image.background\n\n    const w = 4096\n    const h = w\n    const { canvas, ctx } = tgdCanvasCreateWithContext2D(w, h)\n    const holes = context.textures2D.create({\n        image: canvas,\n    })\n    ctx.clearRect(0, 0, w, h)\n    let count = 0\n    window.setInterval(() => {\n        if (count > 59) {\n            ctx.clearRect(0, 0, w, h)\n            count = 0\n            return\n        }\n\n        count++\n        ctx.fillStyle = "#fff"\n        const x = Math.random() * w\n        const y = Math.random() * h\n        const r = 50 + 400 * Math.random()\n        ctx.beginPath()\n        ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2)\n        ctx.fill()\n        holes.loadImage(canvas)\n        context.paint()\n    }, 500)\n    context.camera.distance = 2.5\n    const painter = new TgdPainterMeshGltf(context, {\n        asset,\n        materialFactory: ({ color }: { color?: TgdTexture2D }) => {\n            if (!color) throw Error("No abedo provided!")\n\n            return new MaterialHole({ abedo: color, holes })\n        },\n    })\n    const orbiter = new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 500,\n    })\n    context.add(\n        new TgdPainterState(context, {\n            depth: webglPresetDepth.less,\n            blend: webglPresetBlend.alpha,\n            children: [\n                new TgdPainterClear(context, {\n                    color: new TgdVec4(0.5, 0.5, 0.5, 1),\n                    depth: 1,\n                }),\n                new TgdPainterBackground(\n                    context,\n                    context.textures2D.create({\n                        image: background,\n                    })\n                ),\n                painter,\n            ],\n        })\n    )\n    painter.paint()\n    context.canvas.addEventListener("dblclick", () => {\n        orbiter.reset(300)\n    })\n}\n\ninterface MaterialHoleOptions {\n    abedo: TgdTexture2D\n    holes: TgdTexture2D\n}\n\nclass MaterialHole implements TgdMaterial {\n    private readonly lightDirection = new TgdVec3(0.1, 0.2, 1)\n\n    public readonly varyings: { [name: string]: WebglAttributeType } = {\n        varNormal: "vec3",\n        varUV: "vec2",\n    }\n    public readonly uniforms: { [name: string]: WebglUniformType } = {\n        texAbedo: "sampler2D",\n        texHoles: "sampler2D",\n        uniLightDir: "vec3",\n    }\n    public readonly fragmentShaderCode = [\n        "vec3 normal = normalize(varNormal);",\n        `float light = abs(dot(normal, uniLightDir));`,\n        `light = pow(light, 9.0) * 0.9;`,\n        `light += 0.2;`,\n        `vec3 color = texture(texAbedo, varUV).rgb;`,\n        `float spec = max(0.0, reflect(uniLightDir, normal).z);`,\n        `spec = pow(spec, 20.0);`,\n        `vec3 holes = texture(texHoles, varUV).rgb;`,\n        `if (holes.r > 0.99) discard;`,\n        `return vec4(color * light + spec + holes * 0.25, 1.0 - holes.r);`,\n    ]\n    public readonly vertexShaderCode = [\n        "varNormal = mat3(uniModelViewMatrix) * NORMAL;",\n        "varUV = TEXCOORD_0;",\n    ]\n\n    constructor(private readonly options: MaterialHoleOptions) {}\n\n    setUniforms(program: TgdProgram): void {\n        program.uniform3fv("uniLightDir", this.lightDirection)\n\n        this.options.abedo.activate(program, "texAbedo", 0)\n        this.options.holes.activate(program, "texHoles", 1)\n    }\n}\n';function x(){const[e,n]=o.useState(!1);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{className:"half-left",children:(0,a.jsx)(u,{})}),(0,a.jsxs)("div",{className:"half-right",children:[(0,a.jsx)("div",{children:(0,a.jsx)(i.yQN,{variant:"elevated",onClick:()=>n(!e),children:e?"Show code details":"Show full code"})}),(0,a.jsx)(s.A,{language:"tsx",value:e?f:p})]})]})}function b(e){const n={h1:"h1",p:"p",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{children:"Punching holes in a shield"}),"\n",(0,a.jsx)(n.p,{children:"In this example, we randomly punch some holes in a mesh. For this, we use two\ntextures: one for the abedo of the mesh, and another one for the holes."}),"\n",(0,a.jsx)(n.p,{children:"As usual, you can move the shield with your pointer."}),"\n",(0,a.jsx)(x,{})]})}function v(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(b,{...e})}):b(e)}},1637:(e,n,t)=>{t.d(n,{A:()=>s});var a=t(1601),r=t.n(a),o=t(6314),i=t.n(o)()(r());i.push([e.id,'.wG5Gt8UucKgObpD7Yp3g {\n    display: inline-block;\n    position: relative;\n    font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;\n    font-size: 0.9rem;\n    margin: 0.5em;\n    background: #0d1117;\n    color: #eee;\n    padding: 0.5em;\n    margin: 0.5em;\n    overflow: auto;\n    box-shadow: 0 0.25em 0.5em #fff1;\n    border: 1px solid #fff3;\n}\n\n.WFvjeSIkQyiXg5gY8rSw {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center;\n}\n\n.WFvjeSIkQyiXg5gY8rSw > div {\n    background: var(--theme-color-secondary-5);\n    color: var(--theme-color-on-secondary-5);\n}\n\n.wG5Gt8UucKgObpD7Yp3g .function {\n    color: mediumpurple;\n}\n\n.wG5Gt8UucKgObpD7Yp3g .keyword {\n    color: #f53;\n}\n\n.wG5Gt8UucKgObpD7Yp3g .string {\n    color: greenyellow;\n}\n\n.wG5Gt8UucKgObpD7Yp3g .operator {\n    color: orange;\n}\n\n.wG5Gt8UucKgObpD7Yp3g .punctuation {\n    color: cyan;\n}\n\n.wG5Gt8UucKgObpD7Yp3g .template-string {\n    background: #9f02;\n}\n\n.wG5Gt8UucKgObpD7Yp3g .interpolation {\n    font-style: italic;\n}\n\n.wG5Gt8UucKgObpD7Yp3g .number {\n    font-weight: bold;\n}\n\n.wG5Gt8UucKgObpD7Yp3g .comment {\n    opacity: 0.6;\n}\n',""]),i.locals={CodeViewer:"wG5Gt8UucKgObpD7Yp3g",popup:"WFvjeSIkQyiXg5gY8rSw"};const s=i},3469:(e,n,t)=>{t.d(n,{A:()=>s});var a=t(1601),r=t.n(a),o=t(6314),i=t.n(o)()(r());i.push([e.id,".hgIjhDQIuBCJEQ4ZgLXp {\n    display: inline-block;\n    margin: 1em;\n}\n\n.hgIjhDQIuBCJEQ4ZgLXp canvas {\n    box-shadow: 0 0.25em 0.5em #fff1;\n    max-width: 100vw;\n    max-height: 100vh;\n}\n\n.efOyHCihw9wfMB6AaAqw {\n    position: relative;\n}\n\n.ywC8N0Uxbvm2Ug2DwPkE {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    background-color: var(--theme-color-primary-1);\n    opacity: 0;\n    transition: opacity 0.3s;\n}\n\n.ywC8N0Uxbvm2Ug2DwPkE.PBWSRsbiwEqGpeL0hEfm {\n    opacity: 1;\n}\n",""]),i.locals={Tgd:"hgIjhDQIuBCJEQ4ZgLXp",relative:"efOyHCihw9wfMB6AaAqw",overlay:"ywC8N0Uxbvm2Ug2DwPkE",loading:"PBWSRsbiwEqGpeL0hEfm"};const s=i},2212:(e,n,t)=>{t.d(n,{A:()=>A});var a=t(4848),r=t(6540),o=t(8848),i=t.n(o);t(5723),t(5903),t(9587),t(2769),t(271),t(3980);const s={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/g,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/g,lookbehind:!0,greedy:!0},{pattern:/^#.+$/g,lookbehind:!1,greedy:!0}],number:{pattern:/(^|[^\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?|\d+(?:_\d+)*n|(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?)(?![\w$])/,lookbehind:!0},type:l(["bvec2","bvec3","bvec4","dmat2","dmat2x2","dmat2x3","dmat2x4","dmat3","dmat3x2","dmat3x3","dmat3x4","dmat4","dmat4x2","dmat4x3","dmat4x4","dvec2","dvec3","dvec4","float","fvec2","fvec3","fvec4","isampler1D","isampler1DArray","isampler2D","isampler2DArray","isampler2DMS","isampler2DMSArray","isampler2DRect","isampler3D","isamplerBuffer","isamplerCube","isamplerCubeArray","ivec2","ivec3","ivec4","mat2","mat2x2","mat2x3","mat2x4","mat3","mat3x2","mat3x3","mat3x4","mat4","mat4x2","mat4x3","mat4x4","sample","sampler1D","sampler1DArray","sampler1DArrayShadow","sampler1DShadow","sampler2D","sampler2DArray","sampler2DArrayShadow","sampler2DMS","sampler2DMSArray","sampler2DRect","sampler2DRectShadow","sampler2DShadow","sampler3D","samplerBuffer","samplerCube","samplerCubeArray","samplerCubeArrayShadow","samplerCubeShadow","usampler1D","usampler1DArray","usampler2D","usampler2DArray","usampler2DMS","usampler2DMSArray","usampler2DRect","usampler3D","usamplerBuffer","usamplerCube","usamplerCubeArray","uvec2","uvec3","uvec4","vec2","vec3","vec4","void"]),keyword:l(["centroid","const","discard","else","flat","highp","if","in","inout","invariant","layout","lowp","mediump","noperspective","out","patch","precision","smooth","subroutine","uniform","active","asm","cast","class","common","enum","extern","external","filter","fixed","goto","half","hvec2","hvec3","hvec4","iimage1D","iimage1DArray","iimage2D","iimage2DArray","iimage3D","iimageBuffer","iimageCube","image1D","image1DArray","image1DArrayShadow","image1DShadow","image2D","image2DArray","image2DArrayShadow","image2DShadow","image3D","imageBuffer","imageCube","inline","input","interface","long","namespace","noinline","output","packed","partition","public","row_major","sampler3DRect","short","sizeof","static","superp","template","this","typedef","uimage1D","uimage1DArray","uimage2D","uimage2DArray","uimage3D","uimageBuffer","uimageCube","union","unsigned","using","volatile"]),global:l(["gl_DepthRange","gl_DepthRange.diff","gl_DepthRange.far","gl_DepthRange.near","gl_FragCoord","gl_FragDepth","gl_FrontFacing","gl_InstanceID","gl_PointCoord","gl_PointSize","gl_Position","gl_VertexID"]),function:l(["abs","acos","acosh","all","any","asin","asinh","atan","atanh","ceil","clamp","cos","cosh","cross","degrees","determinant","dFdx","dFdy","distance","dot","equal","exp","exp2","faceforward","floatBitsToInt","floatBitsToUint","floor","fract","fwidth","greaterThan","greaterThanEqual","intBitsToFloat","inverse","inversesqrt","isinf","isnan","length","lessThan","lessThanEqual","log","log2","matrixCompMult","max","min","mix","mod","modf","normalize","not","notEqual","outerProduct","packHalf2x16","packSnorm2x16","packUnorm2x16","pow","radians","reflect","refract","round","roundEven","sign","sin","sinh","smoothstep","sqrt","step","tan","tanh","texelFetch","texelFetchOffset","texture","textureGrad","textureGradOffset","textureLod","textureLodOffset","textureOffset","textureProj","textureProjGrad","textureProjGradOffset","textureProjLod","textureProjLodOffset","textureProjOffset","textureSize","transpose","trunc","uintBitsToFloat","unpackHalf2x16","unpackSnorm2x16","unpackUnorm2x16"])};function l(e){return{pattern:new RegExp(`(?:[^a-zA-Z0-9_])(${e.join("|")})(?=[^a-zA-Z0-9_])`),lookbehind:!1,greedy:!0}}var c=t(5072),d=t.n(c),g=t(7825),u=t.n(g),m=t(7659),h=t.n(m),p=t(5056),f=t.n(p),x=t(540),b=t.n(x),v=t(1113),w=t.n(v),y=t(1637),D={};D.styleTagTransform=w(),D.setAttributes=f(),D.insert=h().bind(null,"head"),D.domAPI=u(),D.insertStyleElement=b(),d()(y.A,D);const T=y.A&&y.A.locals?y.A.locals:void 0;function A(e){const{value:n}=e;if("string"==typeof n){const t=Object.assign(Object.assign({},e),{value:n});return(0,a.jsx)(C,Object.assign({},t))}const t=Object.assign(Object.assign({},e),{value:n});return(0,a.jsx)(k,Object.assign({},t))}function C(e){const n=r.useRef(0),[t,o]=r.useState(!1),l=r.useRef(null);return r.useEffect((()=>{window.setTimeout((()=>{const n=l.current;if(!n)return;const t=i().highlight(e.value,function(e){switch(e){case"ts":return i().languages.typescript;case"tsx":return i().languages.tsx;case"frag":case"vert":return i().languages.glsl;default:return s}}(e.language),e.language);n.innerHTML=t}),100)}),[e.value,e.language]),(0,a.jsxs)("div",{className:j(e),onDoubleClick:()=>{navigator.clipboard.writeText(e.value).then((()=>{o(!0),window.clearTimeout(n.current),n.current=window.setTimeout((()=>o(!1)),7e3)}))},children:[(0,a.jsx)("pre",{children:(0,a.jsx)("code",{ref:l,className:`language-${e.language}`})}),t&&(0,a.jsx)("div",{className:T.popup,onClick:()=>{o(!1),window.clearTimeout(n.current),n.current=0},children:(0,a.jsx)("div",{children:"This code has been copied to the clipboard!"})})]})}function j(e){const n=[T.CodeViewer];return"string"==typeof e.className&&n.push(e.className),n.join(" ")}function k(e){console.log("🚀 [CodeViewer] props.value = ",e.value);const n=Object.keys(e.value);return(0,a.jsx)(a.Fragment,{children:n.map(((n,t)=>(0,a.jsxs)("details",{open:0===t,children:[(0,a.jsx)("summary",{children:n}),(0,a.jsx)(C,{value:e.value[n],language:e.language})]},n)))})}},6281:(e,n,t)=>{t.d(n,{A:()=>A});var a=t(4848),r=t(6540),o=t(7556),i=t(8766),s=t(5072),l=t.n(s),c=t(7825),d=t.n(c),g=t(7659),u=t.n(g),m=t(5056),h=t.n(m),p=t(540),f=t.n(p),x=t(1113),b=t.n(x),v=t(3469),w={};w.styleTagTransform=b(),w.setAttributes=h(),w.insert=u().bind(null,"head"),w.domAPI=d(),w.insertStyleElement=f(),l()(v.A,w);const y=v.A&&v.A.locals?v.A.locals:void 0;var D=t(5670),T=function(e,n,t,a){return new(t||(t=Promise))((function(r,o){function i(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,s)}l((a=a.apply(e,n||[])).next())}))};function A({className:e,options:n,onReady:t,width:s="640px",height:l="480px",noBorder:c=!1,assets:d}){const[g,u]=r.useState(!1),m=r.useRef(null),h=r.useRef(null),[p,f]=r.useState(!0);let x="auto";s.endsWith("px")&&l.endsWith("px")&&(x=`${s.substring(s.length-2)} / ${l.substring(l.length-2)}`);const b=e=>{if(!e)return;if(h.current)return;h.current=e;const a=new o.tf(e,n);m.current=a,f(!0),function(){return T(this,arguments,void 0,(function*({glb:e,data:n,image:t}={}){console.log("🚀 [Tgd] glb, data, image = ",e,n,t);const a={glb:{},data:{},image:{}},r=[];return t&&Object.keys(t).forEach((e=>{r.push((()=>T(this,void 0,void 0,(function*(){const n=t[e];console.log("Loading image:",n);const r=yield(0,o.V_)(n);r&&(a.image[e]=r)}))))})),e&&Object.keys(e).forEach((n=>{r.push((()=>T(this,void 0,void 0,(function*(){const t=e[n];console.log("Loading GLB:",t);const r=yield(0,o.TC)(t);r&&(a.glb[n]=r)}))))})),n&&Object.keys(n).forEach((e=>{r.push((()=>T(this,void 0,void 0,(function*(){const t=n[e],r=yield(0,o.vS)(t);r&&(a.data[e]=r)}))))})),yield Promise.all(r.map((e=>e()))),console.log("🚀 [Tgd] assets = ",a),a}))}(d).then((e=>{t(a,e),a.paint(),f(!1)})).catch((()=>f(!1)))};return r.useEffect((()=>{const e=h.current,n=m.current;if(!e||!n)return;const t=new ResizeObserver((()=>n.paint()));return t.observe(e),e.requestFullscreen||(e.requestFullscreen=e.webkitRequestFullscreen),u(Boolean(e.requestFullscreen)),()=>t.unobserve(e)}),[m.current,h.current]),c?(0,a.jsx)("canvas",{className:e,style:{width:s,height:l,aspectRatio:x,maxWidth:"95%",maxHeight:"95%"},ref:b}):(0,a.jsxs)("div",{className:i.Sxu.classNames.join(e,y.Tgd),children:[(0,a.jsx)(i.sWC,{display:"flex",justifyContent:"flex-end",children:g&&(0,a.jsx)(i.yQN,{variant:"elevated",onClick:()=>{const e=h.current;e&&e.requestFullscreen()},enabled:!p,children:"Show fullscreen"})}),(0,a.jsxs)("div",{className:y.relative,children:[(0,a.jsx)("canvas",{style:{width:s,height:l},ref:b}),(0,a.jsx)("div",{className:i.Sxu.classNames.join(y.overlay,p&&y.loading),children:(0,a.jsx)(D.A,{})})]})]})}}}]);