"use strict";(self.webpackChunk_tolokoban_tgd=self.webpackChunk_tolokoban_tgd||[]).push([[6954],{5166:(e,n,t)=>{t.r(n),t.d(n,{default:()=>f});var a=t(4848),r=t(8453),o=t(6540),s=t(7402),i=t(9074),l=t(3541),c=t(7289);const d=t.p+"bin/shield.b395cf0165ad25f85bac.glb",h=t.p+"img/background.81de42e9b532227029ac.png";function g(){return(0,a.jsx)(c.A,{onReady:u,assets:{image:{background:h},glb:{shield:d}}})}function u(e,n){const t=n.glb.shield,a=n.image.background,r=4096,o=r,{canvas:s,ctx:i}=(0,l.bj4)(r,o),c=new l.HTX(e).loadBitmap(s);i.clearRect(0,0,r,o);let d=0;window.setInterval((()=>{if(d>59)return i.clearRect(0,0,r,o),void(d=0);d++,i.fillStyle="#fff";const n=Math.random()*r,t=Math.random()*o,a=50+400*Math.random();i.beginPath(),i.ellipse(n,t,a,a,0,0,2*Math.PI),i.fill(),c.loadBitmap(s),e.paint()}),500),e.camera.transfo.distance=2.5;const h=new l.dRj(e,{asset:t,material:({color:e})=>{if(!(e instanceof l.HTX))throw Error("No abedo provided!");return new x({abedo:e,holes:c})}}),g=new l.pwt(e,{inertiaOrbit:500});e.add(new l.Ipk(e,{depth:l.Eg5.less,blend:l.aMr.alpha,children:[new l.o57(e,{color:new l.oao(.5,.5,.5,1),depth:1}),new l.b6h(e,{texture:new l.HTX(e).loadBitmap(a)}),h]})),e.paint(),e.canvas.addEventListener("dblclick",(()=>{g.reset(300)}))}class x extends l.rBx{constructor(e){super(),this.options=e,this.lightDirection=new l.hNi(.1,.2,1),this.varyings={varNormal:"vec3",varUV:"vec2"},this.uniforms={texAbedo:"sampler2D",texHoles:"sampler2D",uniLightDir:"vec3"},this.fragmentShaderCode=["vec3 normal = normalize(varNormal);","float light = abs(dot(normal, uniLightDir));","light = pow(light, 9.0) * 0.9;","light += 0.2;","vec3 color = texture(texAbedo, varUV).rgb;","float spec = max(0.0, reflect(uniLightDir, normal).z);","spec = pow(spec, 20.0);","vec3 holes = texture(texHoles, varUV).rgb;","if (holes.r > 0.99) discard;","return vec4(color * light + spec + holes * 0.25, 1.0 - holes.r);"],this.vertexShaderCode=["varNormal = mat3(uniModelViewMatrix) * NORMAL;","varUV = TEXCOORD_0;"]}setUniforms(e){e.uniform3fv("uniLightDir",this.lightDirection),this.options.abedo.activate(0,e,"texAbedo"),this.options.holes.activate(1,e,"texHoles")}}const m={"Initialising WebGL":'function init(context: TgdContext, assets: Assets) {\n    const asset = assets.glb.shield\n    const background = assets.image.background\n\n    const w = 4096\n    const h = w\n    const { canvas, ctx } = tgdCanvasCreateWithContext2D(w, h)\n    const holes = new TgdTexture2D(context).loadBitmap(canvas)\n    ctx.clearRect(0, 0, w, h)\n    let count = 0\n    window.setInterval(() => {\n        if (count > 59) {\n            ctx.clearRect(0, 0, w, h)\n            count = 0\n            return\n        }\n\n        count++\n        ctx.fillStyle = "#fff"\n        const x = Math.random() * w\n        const y = Math.random() * h\n        const r = 50 + 400 * Math.random()\n        ctx.beginPath()\n        ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2)\n        ctx.fill()\n        holes.loadBitmap(canvas)\n        context.paint()\n    }, 500)\n    context.camera.transfo.distance = 2.5\n    const painter = new TgdPainterMeshGltf(context, {\n        asset,\n        material: ({ color }) => {\n            if (!(color instanceof TgdTexture2D))\n                throw Error("No abedo provided!")\n\n            return new MaterialHole({ abedo: color, holes })\n        },\n    })\n    const orbiter = new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 500,\n    })\n    context.add(\n        new TgdPainterState(context, {\n            depth: webglPresetDepth.less,\n            blend: webglPresetBlend.alpha,\n            children: [\n                new TgdPainterClear(context, {\n                    color: new TgdVec4(0.5, 0.5, 0.5, 1),\n                    depth: 1,\n                }),\n                new TgdPainterBackground(context, {\n                    texture: new TgdTexture2D(context).loadBitmap(background),\n                }),\n                painter,\n            ],\n        })\n    )\n    context.paint()\n    context.canvas.addEventListener("dblclick", () => {\n        orbiter.reset(300)\n    })\n}',"Class MaterialHole":'interface MaterialHoleOptions {\n    abedo: TgdTexture2D\n    holes: TgdTexture2D\n}\n\nclass MaterialHole extends TgdMaterial {\n    private readonly lightDirection = new TgdVec3(0.1, 0.2, 1)\n\n    public readonly varyings: { [name: string]: WebglAttributeType } = {\n        varNormal: "vec3",\n        varUV: "vec2",\n    }\n    public readonly uniforms: { [name: string]: WebglUniformType } = {\n        texAbedo: "sampler2D",\n        texHoles: "sampler2D",\n        uniLightDir: "vec3",\n    }\n    public readonly fragmentShaderCode = [\n        "vec3 normal = normalize(varNormal);",\n        `float light = abs(dot(normal, uniLightDir));`,\n        `light = pow(light, 9.0) * 0.9;`,\n        `light += 0.2;`,\n        `vec3 color = texture(texAbedo, varUV).rgb;`,\n        `float spec = max(0.0, reflect(uniLightDir, normal).z);`,\n        `spec = pow(spec, 20.0);`,\n        `vec3 holes = texture(texHoles, varUV).rgb;`,\n        `if (holes.r > 0.99) discard;`,\n        `return vec4(color * light + spec + holes * 0.25, 1.0 - holes.r);`,\n    ]\n    public readonly vertexShaderCode = [\n        "varNormal = mat3(uniModelViewMatrix) * NORMAL;",\n        "varUV = TEXCOORD_0;",\n    ]\n\n    constructor(private readonly options: MaterialHoleOptions) {\n        super()\n    }\n\n    setUniforms(program: TgdProgram): void {\n        program.uniform3fv("uniLightDir", this.lightDirection)\n\n        this.options.abedo.activate(0, program, "texAbedo")\n        this.options.holes.activate(1, program, "texHoles")\n    }\n}'},p='import * as React from "react"\nimport {\n    tgdCanvasCreateWithContext2D,\n    TgdCodeBloc,\n    TgdContext,\n    TgdControllerCameraOrbit,\n    TgdMaterial,\n    TgdPainterBackground,\n    TgdPainterClear,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdProgram,\n    TgdTexture2D,\n    TgdVec3,\n    TgdVec4,\n    WebglAttributeType,\n    webglPresetBlend,\n    webglPresetDepth,\n    WebglUniformType,\n} from "@tolokoban/tgd"\n\nimport View, { Assets } from "@/components/demo/Tgd"\nimport AssetGlb from "../assets/shield.glb"\nimport AssetBackground from "../assets/background.png"\n\nexport default function ViewShield(): JSX.Element {\n    return (\n        <View\n            onReady={init}\n            assets={{\n                image: {\n                    background: AssetBackground,\n                },\n                glb: {\n                    shield: AssetGlb,\n                },\n            }}\n        />\n    )\n}\n\nfunction init(context: TgdContext, assets: Assets) {\n    const asset = assets.glb.shield\n    const background = assets.image.background\n\n    const w = 4096\n    const h = w\n    const { canvas, ctx } = tgdCanvasCreateWithContext2D(w, h)\n    const holes = new TgdTexture2D(context).loadBitmap(canvas)\n    ctx.clearRect(0, 0, w, h)\n    let count = 0\n    window.setInterval(() => {\n        if (count > 59) {\n            ctx.clearRect(0, 0, w, h)\n            count = 0\n            return\n        }\n\n        count++\n        ctx.fillStyle = "#fff"\n        const x = Math.random() * w\n        const y = Math.random() * h\n        const r = 50 + 400 * Math.random()\n        ctx.beginPath()\n        ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2)\n        ctx.fill()\n        holes.loadBitmap(canvas)\n        context.paint()\n    }, 500)\n    context.camera.transfo.distance = 2.5\n    const painter = new TgdPainterMeshGltf(context, {\n        asset,\n        material: ({ color }) => {\n            if (!(color instanceof TgdTexture2D))\n                throw Error("No abedo provided!")\n\n            return new MaterialHole({ abedo: color, holes })\n        },\n    })\n    const orbiter = new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 500,\n    })\n    context.add(\n        new TgdPainterState(context, {\n            depth: webglPresetDepth.less,\n            blend: webglPresetBlend.alpha,\n            children: [\n                new TgdPainterClear(context, {\n                    color: new TgdVec4(0.5, 0.5, 0.5, 1),\n                    depth: 1,\n                }),\n                new TgdPainterBackground(context, {\n                    texture: new TgdTexture2D(context).loadBitmap(background),\n                }),\n                painter,\n            ],\n        })\n    )\n    context.paint()\n    context.canvas.addEventListener("dblclick", () => {\n        orbiter.reset(300)\n    })\n}\n\ninterface MaterialHoleOptions {\n    abedo: TgdTexture2D\n    holes: TgdTexture2D\n}\n\nclass MaterialHole extends TgdMaterial {\n    private readonly lightDirection = new TgdVec3(0.1, 0.2, 1)\n\n    public readonly varyings: { [name: string]: WebglAttributeType } = {\n        varNormal: "vec3",\n        varUV: "vec2",\n    }\n    public readonly uniforms: { [name: string]: WebglUniformType } = {\n        texAbedo: "sampler2D",\n        texHoles: "sampler2D",\n        uniLightDir: "vec3",\n    }\n    public readonly fragmentShaderCode = [\n        "vec3 normal = normalize(varNormal);",\n        `float light = abs(dot(normal, uniLightDir));`,\n        `light = pow(light, 9.0) * 0.9;`,\n        `light += 0.2;`,\n        `vec3 color = texture(texAbedo, varUV).rgb;`,\n        `float spec = max(0.0, reflect(uniLightDir, normal).z);`,\n        `spec = pow(spec, 20.0);`,\n        `vec3 holes = texture(texHoles, varUV).rgb;`,\n        `if (holes.r > 0.99) discard;`,\n        `return vec4(color * light + spec + holes * 0.25, 1.0 - holes.r);`,\n    ]\n    public readonly vertexShaderCode = [\n        "varNormal = mat3(uniModelViewMatrix) * NORMAL;",\n        "varUV = TEXCOORD_0;",\n    ]\n\n    constructor(private readonly options: MaterialHoleOptions) {\n        super()\n    }\n\n    setUniforms(program: TgdProgram): void {\n        program.uniform3fv("uniLightDir", this.lightDirection)\n\n        this.options.abedo.activate(0, program, "texAbedo")\n        this.options.holes.activate(1, program, "texHoles")\n    }\n}\n';function b(){const[e,n]=o.useState(!1);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{className:"half-left",children:(0,a.jsx)(g,{})}),(0,a.jsxs)("div",{className:"half-right",children:[(0,a.jsx)("div",{children:(0,a.jsx)(s.yQN,{variant:"elevated",onClick:()=>n(!e),children:e?"Show code details":"Show full code"})}),(0,a.jsx)(i.A,{language:"tsx",value:e?p:m})]})]})}function v(e){const n={h1:"h1",p:"p",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{children:"Punching holes in a shield"}),"\n",(0,a.jsx)(n.p,{children:"In this example, we randomly punch some holes in a mesh. For this, we use two\ntextures: one for the abedo of the mesh, and another one for the holes."}),"\n",(0,a.jsx)(n.p,{children:"As usual, you can move the shield with your pointer."}),"\n",(0,a.jsx)(b,{})]})}function f(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(v,{...e})}):v(e)}},7289:(e,n,t)=>{t.d(n,{A:()=>c});var a=t(4848),r=t(6540),o=t(3541),s=t(7402),i=t(3686);const l={Tgd:"hgIjhDQIuBCJEQ4ZgLXp",relative:"efOyHCihw9wfMB6AaAqw",overlay:"ywC8N0Uxbvm2Ug2DwPkE",loading:"PBWSRsbiwEqGpeL0hEfm",screen:"BErChOLWGtciKhh3IFud",canvas:"fT7FcYouYlPbElIAEXRP",gizmo:"uAPfWt_Dhe7RaRrnmIu0"};function c({className:e,options:n,onReady:t,gizmo:c=!1,width:d="640px",height:h="480px",noBorder:g=!1,assets:u,children:x}){const[m,p]=r.useState(!0),[b,v]=r.useState(!1),f=r.useRef(null),w=r.useRef(null),T=r.useRef(null),y=r.useRef(null),[C,D]=r.useState(!0);let M="auto";d.endsWith("px")&&h.endsWith("px")&&(d.substring(d.length-2),h.substring(h.length-2));const j=e=>{if(!e)return;if(w.current)return;w.current=e;const a=new o.tfp(e,n);f.current=a,D(!0),async function({glb:e,data:n,text:t,image:a}={}){console.log("🚀 [Tgd] glb, data, text, image = ",e,n,t,a);const r={glb:{},data:{},text:{},image:{}},s=[];return a&&Object.keys(a).forEach((e=>{s.push((async()=>{const n=a[e];console.log("Loading image:",n);const t=await(0,o.V_9)(n);t&&(r.image[e]=t)}))})),e&&Object.keys(e).forEach((n=>{s.push((async()=>{const t=e[n];console.log("Loading GLB:",t);const a=await(0,o.TCe)(t);a&&(r.glb[n]=a)}))})),n&&Object.keys(n).forEach((e=>{s.push((async()=>{const t=n[e],a=await(0,o.vSU)(t);a&&(r.data[e]=a)}))})),t&&Object.keys(t).forEach((e=>{s.push((async()=>{const n=t[e],a=await(0,o.jWq)(n);a&&(r.text[e]=a)}))})),await Promise.all(s.map((e=>e()))),r}(u).then((e=>{console.log("Ready!"),t(a,e),a.paint(),D(!1)})).catch((e=>{console.error("Unable to initialize the scene!",e),D(!1)}));const r=T.current;r&&r.attachContext(a)},k=e=>{const n=new o.GbF({canvas:e});T.current=n,n.eventTipClick.addListener((({to:e})=>{const n=f.current;console.log("🚀 [tgd] to, context =",e,n),n&&n.animSchedule({duration:.2,easingFunction:o.Wcc,action:(0,o.vRM)(n.camera,{orientation:e})})}));const t=f.current;t&&n.attachContext(t)};return r.useEffect((()=>{const e=w.current,n=f.current;if(!e||!n)return;const t=new ResizeObserver((()=>n.paint()));return t.observe(e),e.requestFullscreen||(e.requestFullscreen=e.webkitRequestFullscreen),v(Boolean(e.requestFullscreen)),()=>t.unobserve(e)}),[f.current,w.current]),g?(0,a.jsxs)("div",{ref:y,className:l.screen,style:{width:m?d:h,height:m?h:d},children:[(0,a.jsx)("canvas",{className:l.canvas,ref:j}),c&&(0,a.jsx)("canvas",{className:l.gizmo,ref:k})]}):(0,a.jsxs)("div",{className:s.Sxu.classNames.join(e,l.Tgd),children:[(0,a.jsxs)(s.sWC,{display:"flex",justifyContent:"space-between",children:[(0,a.jsx)(s.yQN,{variant:"elevated",onClick:()=>p(!m),enabled:!C,children:m?"Switch to Portrait":"Switch to Landscape"}),b&&(0,a.jsx)(s.yQN,{variant:"elevated",onClick:()=>{const e=y.current;e&&e.requestFullscreen()},enabled:!C,children:"Fullscreen"})]}),(0,a.jsxs)("div",{className:l.relative,children:[(0,a.jsxs)("div",{ref:y,className:l.screen,style:{width:m?d:h,height:m?h:d},children:[(0,a.jsx)("canvas",{className:l.canvas,ref:j}),c&&(0,a.jsx)("canvas",{className:l.gizmo,ref:k})]}),(0,a.jsx)("div",{className:s.Sxu.classNames.join(l.overlay,C&&l.loading),children:(0,a.jsx)(i.A,{})}),x]})]})}},8453:(e,n,t)=>{t.d(n,{R:()=>o});var a=t(6540);const r=a.createContext({});function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}}}]);