"use strict";(self.webpackChunk_tolokoban_tgd=self.webpackChunk_tolokoban_tgd||[]).push([[370],{5568:(e,n,t)=>{t.r(n),t.d(n,{default:()=>w});var r=t(4848),a=t(8453),o=t(6540),i=t(8766),s=t(2261),f=t(4213),l=t(4088);const c=t.p+"bin/logo.f63fd222e8eb89f79227.glb";var u=t(4859);function d(e,n){e.camera=new f.xN({distance:6,far:100,near:.01,fovy:Math.PI/4,zoom:1});const t=new f.K7(e),r=new f.K7(e),a=new f.D$(e,{texture:r.textureColor0,filters:[new f.HB],flipY:!0}),o=new f.Ip(e,{depth:f.Eg.less,cull:f.Tf.back,children:[a,new f.o5(e,{depth:1}),new f.dR(e,{asset:n.glb.mesh,materialFactory:()=>new f.$H({color:new f.o(1,.666,0),specularExponent:5,specularIntensity:2.5,light:new f.U5({color:new f.o(1,1,1,1),direction:new f.hN(1,0,0)}),ambient:new f.U5({color:new f.o(.111,.333,.999,4)})})})]});t.add(o);const i=new f.Ch({hueShiftInDegrees:2}),s=new f.HB({zoom:1.007}),l=new f.D$(e,{texture:t.textureColor0,filters:[i,s],flipY:!0});r.add(l);const c=new f.D$(e,{texture:t.textureColor0,filters:[new f.HB],flipY:!0});t.onExit=()=>{l.texture=t.textureColor0},r.onExit=()=>{a.texture=r.textureColor0,c.texture=r.textureColor0},e.add(t,r,c,new f.ZJ((n=>{const{camera:t}=e;t.orbitAroundX(.03*Math.sin(.005045*n)),t.orbitAroundY(.02*Math.sin(.001751*n)),t.setShift(Math.sin(.001414*n),.1*Math.sin(.003414*n),1.2*Math.sin(.002049*n)),s.translation.x=.005*Math.sin(.0024581*n),s.translation.y=.005*Math.sin(.0037151*n)}))),e.play()}function m(){return(0,r.jsx)(l.A,{onReady:d,assets:{glb:{mesh:c},image:{background:u}}})}const g={"Detail #1":"    context.camera = new TgdCameraPerspective({\n        distance: 6,\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI / 4,\n        zoom: 1,\n    })\n    const framebuffer1 = new TgdPainterFramebuffer(context)\n    const framebuffer2 = new TgdPainterFramebuffer(context)\n    const background = new TgdPainterFilter(context, {\n        texture: framebuffer2.textureColor0,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        cull: webglPresetCull.back,\n        children: [\n            background,\n            new TgdPainterClear(context, {\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                materialFactory: () =>\n                    new TgdMaterialDiffuse({\n                        color: new TgdVec4(1, 0.666, 0),\n                        specularExponent: 5,\n                        specularIntensity: 2.5,\n                        light: new TgdLight({\n                            color: new TgdVec4(1, 1, 1, 1),\n                            direction: new TgdVec3(1, 0, 0),\n                        }),\n                        ambient: new TgdLight({\n                            color: new TgdVec4(0.111, 0.333, 0.999, 4),\n                        }),\n                    }),\n                // new TgdMaterialNormals(),\n            }),\n        ],\n    })\n    framebuffer1.add(painter)\n    const filterHue = new TgdFilterHueRotation({ hueShiftInDegrees: 2 })\n    const filterZoom = new TgdFilterZoom({ zoom: 1.007 })\n    const filters = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0,\n        filters: [filterHue, filterZoom],\n        flipY: true,\n    })\n    framebuffer2.add(filters)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    /**\n     * This is important because the texture of a framebuffer is recreated\n     * any time the screen size changes.\n     */\n    framebuffer1.onExit = () => {\n        filters.texture = framebuffer1.textureColor0\n    }\n    framebuffer2.onExit = () => {\n        background.texture = framebuffer2.textureColor0\n        screen.texture = framebuffer2.textureColor0\n    }\n    context.add(\n        framebuffer1,\n        framebuffer2,\n        screen,\n        new TgdPainterLogic(time => {\n            const { camera } = context\n            camera.orbitAroundX(Math.sin(time * 0.005045) * 0.03)\n            camera.orbitAroundY(Math.sin(time * 0.001751) * 0.02)\n            camera.setShift(\n                Math.sin(time * 0.001414),\n                Math.sin(time * 0.003414) * 0.1,\n                Math.sin(time * 0.002049) * 1.2\n            )\n            filterZoom.translation.x = 0.005 * Math.sin(time * 0.0024581)\n            filterZoom.translation.y = 0.005 * Math.sin(time * 0.0037151)\n        })\n    )\n    context.play()"},x='import {\n    TgdCameraPerspective,\n    TgdContext,\n    TgdFilterHueRotation,\n    TgdFilterZoom,\n    TgdLight,\n    TgdMaterialDiffuse,\n    TgdPainterClear,\n    TgdPainterFilter,\n    TgdPainterFramebuffer,\n    TgdPainterLogic,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdVec3,\n    TgdVec4,\n    webglPresetCull,\n    webglPresetDepth,\n} from "@tolokoban/tgd"\nimport View, { Assets } from "@/components/demo/Tgd"\n\nimport SuzanneURL from "@/assets/mesh/logo.glb"\nimport BackgroundURL from "@/assets/image/dino.webp"\n\nfunction init(context: TgdContext, assets: Assets) {\n    context.camera = new TgdCameraPerspective({\n        distance: 6,\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI / 4,\n        zoom: 1,\n    })\n    const framebuffer1 = new TgdPainterFramebuffer(context)\n    const framebuffer2 = new TgdPainterFramebuffer(context)\n    const background = new TgdPainterFilter(context, {\n        texture: framebuffer2.textureColor0,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        cull: webglPresetCull.back,\n        children: [\n            background,\n            new TgdPainterClear(context, {\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                materialFactory: () =>\n                    new TgdMaterialDiffuse({\n                        color: new TgdVec4(1, 0.666, 0),\n                        specularExponent: 5,\n                        specularIntensity: 2.5,\n                        light: new TgdLight({\n                            color: new TgdVec4(1, 1, 1, 1),\n                            direction: new TgdVec3(1, 0, 0),\n                        }),\n                        ambient: new TgdLight({\n                            color: new TgdVec4(0.111, 0.333, 0.999, 4),\n                        }),\n                    }),\n                // new TgdMaterialNormals(),\n            }),\n        ],\n    })\n    framebuffer1.add(painter)\n    const filterHue = new TgdFilterHueRotation({ hueShiftInDegrees: 2 })\n    const filterZoom = new TgdFilterZoom({ zoom: 1.007 })\n    const filters = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0,\n        filters: [filterHue, filterZoom],\n        flipY: true,\n    })\n    framebuffer2.add(filters)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebuffer1.textureColor0,\n        filters: [new TgdFilterZoom()],\n        flipY: true,\n    })\n    /**\n     * This is important because the texture of a framebuffer is recreated\n     * any time the screen size changes.\n     */\n    framebuffer1.onExit = () => {\n        filters.texture = framebuffer1.textureColor0\n    }\n    framebuffer2.onExit = () => {\n        background.texture = framebuffer2.textureColor0\n        screen.texture = framebuffer2.textureColor0\n    }\n    context.add(\n        framebuffer1,\n        framebuffer2,\n        screen,\n        new TgdPainterLogic(time => {\n            const { camera } = context\n            camera.orbitAroundX(Math.sin(time * 0.005045) * 0.03)\n            camera.orbitAroundY(Math.sin(time * 0.001751) * 0.02)\n            camera.setShift(\n                Math.sin(time * 0.001414),\n                Math.sin(time * 0.003414) * 0.1,\n                Math.sin(time * 0.002049) * 1.2\n            )\n            filterZoom.translation.x = 0.005 * Math.sin(time * 0.0024581)\n            filterZoom.translation.y = 0.005 * Math.sin(time * 0.0037151)\n        })\n    )\n    context.play()\n}\n\nexport default function Demo() {\n    return (\n        <View\n            onReady={init}\n            assets={{\n                glb: {\n                    mesh: SuzanneURL,\n                },\n                image: {\n                    background: BackgroundURL,\n                },\n            }}\n        />\n    )\n}\n';function h(){const[e,n]=o.useState(!1);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",{className:"half-left",children:(0,r.jsx)(m,{})}),(0,r.jsxs)("div",{className:"half-right",children:[(0,r.jsx)("div",{children:(0,r.jsx)(i.yQN,{variant:"elevated",onClick:()=>n(!e),children:e?"Show code details":"Show full code"})}),(0,r.jsx)(s.A,{language:"tsx",value:e?x:g})]})]})}function b(e){const n={a:"a",h1:"h1",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{children:[(0,r.jsx)(n.a,{href:"docs/classes/TgdPainterFramebuffer.html",children:"TgdPainterFramebuffer"})," - Example 1"]}),"\n",(0,r.jsx)(h,{})]})}function w(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}}}]);