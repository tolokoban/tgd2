"use strict";(self.webpackChunk_tolokoban_tgd=self.webpackChunk_tolokoban_tgd||[]).push([[490],{4490:(e,n,t)=>{t.r(n),t.d(n,{default:()=>p});var r=t(4848),a=t(8453),o=t(6540),i=t(8766),s=t(2261),c=t(9827),f=t(4088),d=t(7979);class l extends c.rB{constructor(){super(),this.vertexShaderCode=["varUV = TEXCOORD_0;"],this.texture=null,this.fragmentShaderCode=["vec4 color1 = texture(texDiffuse, varUV * 1.0);","float k = 0.7071067811865476;","float ang = uniTime * .777;","vec4 color2 = vec4(",["0.5 + k * sin(ang - 2.0943951023931953),","0.5 + k * sin(ang),","0.5 + k * sin(ang + 2.0943951023931953),","1.0"],");","vec2 p = 2.0 * (varUV - vec2(.5));","vec2 polar = vec2(",["length(p),","atan(p.y, p.x)"],");","float alpha = 0.1 + 0.3 * (cos(uniTime * 1.451) * sin(uniTime) + 1.0);","polar.y -= uniTime * 1.421 * (1.0 + pow(polar.x, .5));","polar.x += 0.25 * sin(0.75 * uniTime + polar.y * 3.0) * cos(uniTime * 1.751);","float beta = 1.0 - smoothstep(0.0, 0.1 + 0.1 * abs(sin(uniTime * 1.1474) * cos(uniTime) * 1.452), abs(fract(polar.x * 0.90) - 0.5));","return mix(color1, color2, max(alpha, beta));"],this.varyings.varUV="vec2",this.uniforms.texDiffuse="sampler2D",this.uniforms.uniTime="float"}setUniforms(e,n){const{texture:t}=this;t&&t.activate(e,"texDiffuse"),e.uniform1f("uniTime",.001*n)}}function u(e,n){e.camera=new c.xN({distance:0,far:100,near:.01,fovy:.25*Math.PI,zoom:.333}),new c.pw(e,{speedPanning:0,inertiaOrbit:1e3});const t=new c.K7(e),r=new c.K7(e),a=new l;a.texture=e.textures2D.create({image:n.image.background});const o=new c.Ip(e,{depth:c.Eg.less,children:[new c.o5(e,{color:new c.o,depth:1}),new c.dR(e,{asset:n.glb.mesh,materialFactory:()=>a})]});t.add(o);const i=new c.D$(e,{filters:[new c.Ch({hueShiftInDegrees:90})],texture:t.texture});r.add(i);const s=new c.D$(e,{texture:t.texture,filters:[new c.HB({zoom:1.1})],flipY:!0});t.onExit=()=>{i.texture=t.texture},r.onExit=()=>{a.texture=r.texture,s.texture=r.texture},e.add(t,r,s,new c.ZJ(((n,t)=>{const{camera:r}=e;r.orbitAroundY(1047e-7*t)}))),e.paint()}function m(){return(0,r.jsx)(f.A,{onReady:u,assets:{glb:{mesh:"/mesh/cube.glb"},image:{background:d}}})}const g={"Detail #1":"    context.camera = new TgdCameraPerspective({\n        distance: 0,\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI * 0.25,\n        zoom: 0.333,\n    })\n    new TgdControllerCameraOrbit(context, {\n        speedPanning: 0,\n        inertiaOrbit: 1000,\n    })\n    const framebufferRender = new TgdPainterFramebuffer(context)\n    const framebufferCopy = new TgdPainterFramebuffer(context)\n    const material = new Material()\n    material.texture = context.textures2D.create({\n        image: assets.image.background,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        // cull: webglPresetCull.front,\n        children: [\n            new TgdPainterClear(context, {\n                color: new TgdVec4(),\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                materialFactory: () => material,\n            }),\n        ],\n    })\n    framebufferRender.add(painter)\n    const copy = new TgdPainterFilter(context, {\n        filters: [\n            new TgdFilterHueRotation({\n                hueShiftInDegrees: 90,\n            }),\n        ],\n        texture: framebufferRender.texture,\n    })\n    framebufferCopy.add(copy)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebufferRender.texture,\n        filters: [new TgdFilterZoom({ zoom: 1.1 })],\n        flipY: true,\n    })\n    framebufferRender.onExit = () => {\n        copy.texture = framebufferRender.texture\n    }\n    framebufferCopy.onExit = () => {\n        material.texture = framebufferCopy.texture\n        screen.texture = framebufferCopy.texture\n    }\n    context.add(\n        framebufferRender,\n        framebufferCopy,\n        screen,\n        new TgdPainterLogic((time, delay) => {\n            const { camera } = context\n            camera.orbitAroundY(delay * 0.0001047)\n            // camera.orbitAroundX(delay * 0.00007154)\n            // camera.orbitAroundZ(delay * 0.0003051)\n            // camera.zoom = 0.333 + 0.3 * Math.abs(Math.sin(time * 0.001457))\n        })\n    )\n    context.paint()"},x='import {\n    TgdCameraPerspective,\n    TgdContext,\n    TgdControllerCameraOrbit,\n    TgdFilterBlur,\n    TgdFilterChromaticAberration,\n    TgdFilterHueRotation,\n    TgdFilterZoom,\n    TgdLight,\n    TgdMaterialDiffuse,\n    TgdMaterialGhost,\n    TgdMaterialNormals,\n    TgdPainterBackground,\n    TgdPainterClear,\n    TgdPainterFilter,\n    TgdPainterFramebuffer,\n    TgdPainterLogic,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdVec3,\n    TgdVec4,\n    webglPresetCull,\n    webglPresetDepth,\n} from "@tolokoban/tgd"\nimport View, { Assets } from "@/components/demo/Tgd"\n\nimport BackgroundURL from "@/gfx/image/dino.webp"\nimport { Material } from "./material"\n\nfunction init(context: TgdContext, assets: Assets) {\n    context.camera = new TgdCameraPerspective({\n        distance: 0,\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI * 0.25,\n        zoom: 0.333,\n    })\n    new TgdControllerCameraOrbit(context, {\n        speedPanning: 0,\n        inertiaOrbit: 1000,\n    })\n    const framebufferRender = new TgdPainterFramebuffer(context)\n    const framebufferCopy = new TgdPainterFramebuffer(context)\n    const material = new Material()\n    material.texture = context.textures2D.create({\n        image: assets.image.background,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        // cull: webglPresetCull.front,\n        children: [\n            new TgdPainterClear(context, {\n                color: new TgdVec4(),\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                materialFactory: () => material,\n            }),\n        ],\n    })\n    framebufferRender.add(painter)\n    const copy = new TgdPainterFilter(context, {\n        filters: [\n            new TgdFilterHueRotation({\n                hueShiftInDegrees: 90,\n            }),\n        ],\n        texture: framebufferRender.texture,\n    })\n    framebufferCopy.add(copy)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebufferRender.texture,\n        filters: [new TgdFilterZoom({ zoom: 1.1 })],\n        flipY: true,\n    })\n    framebufferRender.onExit = () => {\n        copy.texture = framebufferRender.texture\n    }\n    framebufferCopy.onExit = () => {\n        material.texture = framebufferCopy.texture\n        screen.texture = framebufferCopy.texture\n    }\n    context.add(\n        framebufferRender,\n        framebufferCopy,\n        screen,\n        new TgdPainterLogic((time, delay) => {\n            const { camera } = context\n            camera.orbitAroundY(delay * 0.0001047)\n            // camera.orbitAroundX(delay * 0.00007154)\n            // camera.orbitAroundZ(delay * 0.0003051)\n            // camera.zoom = 0.333 + 0.3 * Math.abs(Math.sin(time * 0.001457))\n        })\n    )\n    context.paint()\n}\n\nexport default function Demo() {\n    return (\n        <View\n            onReady={init}\n            assets={{\n                glb: {\n                    // mesh: "/mesh/yin-yang.glb",\n                    mesh: "/mesh/cube.glb",\n                },\n                image: {\n                    background: BackgroundURL,\n                },\n            }}\n        />\n    )\n}\n';function b(){const[e,n]=o.useState(!1);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",{className:"half-left",children:(0,r.jsx)(m,{})}),(0,r.jsxs)("div",{className:"half-right",children:[(0,r.jsx)("div",{children:(0,r.jsx)(i.yQN,{variant:"elevated",onClick:()=>n(!e),children:e?"Show code details":"Show full code"})}),(0,r.jsx)(s.A,{language:"tsx",value:e?x:g})]})]})}function h(e){const n={a:"a",h1:"h1",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{children:[(0,r.jsx)(n.a,{href:"docs/classes/TgdPainterFramebuffer.html",children:"TgdPainterFramebuffer"})," - Example 2"]}),"\n",(0,r.jsx)(b,{})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);