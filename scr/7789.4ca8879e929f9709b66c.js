"use strict";(self.webpackChunk_tolokoban_tgd=self.webpackChunk_tolokoban_tgd||[]).push([[7789],{2672:(n,e,t)=>{t.r(e),t.d(e,{default:()=>j});var r=t(4848),a=t(8453),o=t(6540),s=t(7781),i=t(9074),c=t(5734),l=t(7289);class d extends c.TgdPainter{constructor(n,e){super(),this.context=n,this.texture=e,this.prg=new c.TgdProgram(n.gl,{vert:["#version 300 es","in vec2 attPoint;","out vec2 varUV;","void main() {",["varUV = vec2(0.5) * (attPoint + vec2(1.0));","gl_Position = vec4(attPoint, 0.0, 1.0);"],"}"],frag:["#version 300 es","precision mediump float;","uniform sampler2D uniTexture;","in vec2 varUV;","out vec4 FragColor;","void main() {",["FragColor = texture(uniTexture, varUV);"],"}"]});const t=new c.TgdDataset({attPoint:"vec2"});t.set("attPoint",new Float32Array([-1,1,1,1,-1,-1,1,-1])),this.vao=new c.TgdVertexArray(n.gl,this.prg,[t])}delete(){this.vao.delete(),this.prg.delete()}paint(n,e){const{context:t,prg:r,vao:a,texture:o}=this,{gl:s}=t;r.use(),o.activate(0,r,"uniTexture"),a.bind(),s.drawArrays(s.TRIANGLE_STRIP,0,4),a.unbind()}}function g(n){const e=153,t=255,r=255,a=153,o=new Uint8Array([0,e,t,0,e,t,0,e,t,0,e,t,0,e,t,0,0,e,t,r,a,0,r,a,0,r,a,0,0,e,t,0,0,e,t,0,e,t,r,a,0,0,e,t,0,e,t,0,0,e,t,0,e,t,r,a,0,0,e,t,0,e,t,0,0,e,t,0,e,t,0,e,t,0,e,t,0,e,t,0]),s=new c.TgdTexture2D(n,{flipY:!0}).setParams({magFilter:"NEAREST"}).loadData(o,{width:5,height:5,internalFormat:"RGB8",format:"RGB"}),i=new d(n,s);n.add(i),n.paint()}function u(){return(0,r.jsx)(l.A,{onReady:g})}const h={"Detail #1":'    const r = 0x00\n    const g = 0x99\n    const b = 0xff\n    const R = 0xff\n    const G = 0x99\n    const B = 0x00\n    // prettier-ignore\n    const data = new Uint8Array([\n        r,g,b, r,g,b, r,g,b, r,g,b, r,g,b, /* padding -> */ 0,\n        r,g,b, R,G,B, R,G,B, R,G,B, r,g,b, /* padding -> */ 0,\n        r,g,b, r,g,b, R,G,B, r,g,b, r,g,b, /* padding -> */ 0,\n        r,g,b, r,g,b, R,G,B, r,g,b, r,g,b, /* padding -> */ 0,\n        r,g,b, r,g,b, r,g,b, r,g,b, r,g,b, /* padding -> */ 0,\n    ])\n    const texture = new TgdTexture2D(ctx, { flipY: true })\n        .setParams({\n            magFilter: "NEAREST",\n        })\n        .loadData(data, {\n            width: 5,\n            height: 5,\n            internalFormat: "RGB8",\n            format: "RGB",\n        })\n    const background = new Painter(ctx, texture)\n    ctx.add(background)\n    ctx.paint()'},x='import { TgdContext, TgdTexture2D } from "@tolokoban/tgd"\nimport View from "@/components/demo/Tgd"\nimport { Painter } from "./painter"\n\nfunction init(ctx: TgdContext) {\n    const r = 0x00\n    const g = 0x99\n    const b = 0xff\n    const R = 0xff\n    const G = 0x99\n    const B = 0x00\n    // prettier-ignore\n    const data = new Uint8Array([\n        r,g,b, r,g,b, r,g,b, r,g,b, r,g,b, /* padding -> */ 0,\n        r,g,b, R,G,B, R,G,B, R,G,B, r,g,b, /* padding -> */ 0,\n        r,g,b, r,g,b, R,G,B, r,g,b, r,g,b, /* padding -> */ 0,\n        r,g,b, r,g,b, R,G,B, r,g,b, r,g,b, /* padding -> */ 0,\n        r,g,b, r,g,b, r,g,b, r,g,b, r,g,b, /* padding -> */ 0,\n    ])\n    const texture = new TgdTexture2D(ctx, { flipY: true })\n        .setParams({\n            magFilter: "NEAREST",\n        })\n        .loadData(data, {\n            width: 5,\n            height: 5,\n            internalFormat: "RGB8",\n            format: "RGB",\n        })\n    const background = new Painter(ctx, texture)\n    ctx.add(background)\n    ctx.paint()\n}\n\nexport default function Demo() {\n    return <View onReady={init} />\n}\n\nconst COLORS: Record<string, [number, number, number]> = {\n    "0": [0, 0.333, 1],\n    "1": [1, 0.666, 0],\n}\n\nfunction makeRGB(...lines: string[]) {\n    const code = lines.join("")\n    const data: number[] = []\n    for (const line of lines) {\n        line.split("").map(digit => data.push(...(COLORS[digit] ?? [])))\n        let size = line.length * "RGB".length\n        while (size % 4 !== 0) {\n            data.push(0)\n            size++\n        }\n    }\n    return new Uint8Array(data.map(v => Math.floor(255 * v)))\n}\n';function f(){const[n,e]=o.useState(!1);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",{className:"half-left",children:(0,r.jsx)(u,{})}),(0,r.jsxs)("div",{className:"half-right",children:[(0,r.jsx)("div",{children:(0,r.jsx)(s.yQN,{variant:"elevated",onClick:()=>e(!n),children:n?"Show code details":"Show full code"})}),(0,r.jsx)(i.A,{language:"tsx",value:n?x:h})]})]})}class m extends c.TgdPainter{constructor(n,e){super(),this.context=n,this.texture=e,this.prg=new c.TgdProgram(n.gl,{vert:["#version 300 es","in vec2 attPoint;","out vec2 varUV;","void main() {",["varUV = vec2(0.5) * (attPoint + vec2(1.0));","gl_Position = vec4(attPoint, 0.0, 1.0);"],"}"],frag:["#version 300 es","precision mediump float;","uniform sampler2D uniTexture;","in vec2 varUV;","out vec4 FragColor;","void main() {",["FragColor = texture(uniTexture, varUV);"],"}"]});const t=new c.TgdDataset({attPoint:"vec2"});t.set("attPoint",new Float32Array([-1,1,1,1,-1,-1,1,-1])),this.vao=new c.TgdVertexArray(n.gl,this.prg,[t])}delete(){this.vao.delete(),this.prg.delete()}paint(n,e){const{context:t,prg:r,vao:a,texture:o}=this,{gl:s}=t;r.use(),o.activate(0,r,"uniTexture"),a.bind(),s.drawArrays(s.TRIANGLE_STRIP,0,4),a.unbind()}}function p(n){const e=[0,153,255],t=[255,153,0],r=new c.TgdTableUint8(5,5,3);["     "," ### ","  #  ","  #  ","     "].forEach((n,a)=>{n.split("").forEach((n,o)=>r.setVec("#"===n?t:e,o,a))});const a=new Uint8Array(r.buffer);console.log("ðŸš€ [TBL] data = ",a);const o=new c.TgdTexture2D(n,{flipY:!0}).setParams({magFilter:"NEAREST"}).loadData(a,{width:5,height:5,internalFormat:"RGB8",format:"RGB"}),s=new m(n,o);n.add(s),n.paint()}function b(){return(0,r.jsx)(l.A,{onReady:p})}const v={"Detail #1":'    const bg = [0x00, 0x99, 0xff]\n    const fg = [0xff, 0x99, 0x00]\n    // prettier-ignore\n    const pixels = [\n        "     ",\n        " ### ",\n        "  #  ",\n        "  #  ",\n        "     ",\n    ]\n    const table = new TgdTableUint8(5, 5, 3)\n    pixels.forEach((line, row) => {\n        line.split("").forEach((color, col) =>\n            table.setVec(color === "#" ? fg : bg, col, row)\n        )\n    })\n    const data = new Uint8Array(table.buffer)\n    console.log("ðŸš€ [TBL] data = ", data) // @FIXME: Remove this line written on 2025-02-04 at 16:49\n    const texture = new TgdTexture2D(ctx, { flipY: true })\n        .setParams({\n            magFilter: "NEAREST",\n        })\n        .loadData(data, {\n            width: 5,\n            height: 5,\n            internalFormat: "RGB8",\n            format: "RGB",\n        })\n    const background = new Painter(ctx, texture)\n    ctx.add(background)\n    ctx.paint()'},w='import { TgdContext, TgdTableUint8, TgdTexture2D } from "@tolokoban/tgd"\nimport View from "@/components/demo/Tgd"\nimport { Painter } from "./painter"\n\nfunction init(ctx: TgdContext) {\n    const bg = [0x00, 0x99, 0xff]\n    const fg = [0xff, 0x99, 0x00]\n    // prettier-ignore\n    const pixels = [\n        "     ",\n        " ### ",\n        "  #  ",\n        "  #  ",\n        "     ",\n    ]\n    const table = new TgdTableUint8(5, 5, 3)\n    pixels.forEach((line, row) => {\n        line.split("").forEach((color, col) =>\n            table.setVec(color === "#" ? fg : bg, col, row)\n        )\n    })\n    const data = new Uint8Array(table.buffer)\n    console.log("ðŸš€ [TBL] data = ", data) // @FIXME: Remove this line written on 2025-02-04 at 16:49\n    const texture = new TgdTexture2D(ctx, { flipY: true })\n        .setParams({\n            magFilter: "NEAREST",\n        })\n        .loadData(data, {\n            width: 5,\n            height: 5,\n            internalFormat: "RGB8",\n            format: "RGB",\n        })\n    const background = new Painter(ctx, texture)\n    ctx.add(background)\n    ctx.paint()\n}\n\nexport default function Demo() {\n    return <View onReady={init} />\n}\n\nconst COLORS: Record<string, [number, number, number]> = {\n    "0": [0, 0.333, 1],\n    "1": [1, 0.666, 0],\n}\n\nfunction makeRGB(...lines: string[]) {\n    const code = lines.join("")\n    const data: number[] = []\n    for (const line of lines) {\n        line.split("").map(digit => data.push(...(COLORS[digit] ?? [])))\n        let size = line.length * "RGB".length\n        while (size % 4 !== 0) {\n            data.push(0)\n            size++\n        }\n    }\n    return new Uint8Array(data.map(v => Math.floor(255 * v)))\n}\n';function T(){const[n,e]=o.useState(!1);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",{className:"half-left",children:(0,r.jsx)(b,{})}),(0,r.jsxs)("div",{className:"half-right",children:[(0,r.jsx)("div",{children:(0,r.jsx)(s.yQN,{variant:"elevated",onClick:()=>e(!n),children:n?"Show code details":"Show full code"})}),(0,r.jsx)(i.A,{language:"tsx",value:n?w:v})]})]})}function R(n){const e={code:"code",h1:"h1",p:"p",strong:"strong",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{children:"Texture2D from data"}),"\n",(0,r.jsxs)(e.p,{children:["Sending data to a texture is more tricky than expected becaue you have to care\ncare of ",(0,r.jsx)(e.strong,{children:"memory alignement"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["Each row of your data must have a number of bytes that is an integral ",(0,r.jsx)(e.strong,{children:"multiple\nof 4"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["In the following example, we are using only 3 bytes per pixel because we\nspecified RGB as format. Since we want a width of 5, we end up with ",(0,r.jsx)(e.strong,{children:"15 bytes"}),"\nin a row. We cannot divide 15 by 4, so we ",(0,r.jsx)(e.strong,{children:"MUST add a padding"})," value at the\nend of the row to have 16 bytes."]}),"\n",(0,r.jsx)(e.p,{children:"If the width you want is 3, for example, then you will need a padding of 3\nbytes."}),"\n",(0,r.jsx)(f,{}),"\n",(0,r.jsxs)(e.p,{children:["This padding can be error prone. To help you, you can use ",(0,r.jsx)(e.code,{children:"TgdTable*"})," classes:"]}),"\n",(0,r.jsx)(T,{})]})}function j(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(R,{...n})}):R(n)}},7289:(n,e,t)=>{t.d(e,{A:()=>l});var r=t(4848),a=t(6540),o=t(5734),s=t(7781),i=t(3686);const c={Tgd:"hgIjhDQIuBCJEQ4ZgLXp",relative:"efOyHCihw9wfMB6AaAqw",overlay:"ywC8N0Uxbvm2Ug2DwPkE",loading:"PBWSRsbiwEqGpeL0hEfm",screen:"BErChOLWGtciKhh3IFud",canvas:"fT7FcYouYlPbElIAEXRP",gizmo:"uAPfWt_Dhe7RaRrnmIu0",actions:"Ia9jfUO3OevcIh2fV6R6",enabled:"dZYZScZBbWV2Pm3ftXcG",error:"J6dIEMXVMCzdFWF9UHio"};function l({className:n,options:e,onReady:t,gizmo:l=!1,width:d="640px",height:g="480px",noBorder:u=!1,assets:h,children:x}){const[f,m]=a.useState(null),[p,b]=a.useState(!0),[v,w]=a.useState(!1),T=a.useRef(null),R=a.useRef(null),j=a.useRef(null),y=a.useRef(null),[B,E]=a.useState(!0);let P="auto";d.endsWith("px")&&g.endsWith("px")&&(d.substring(d.length-2),g.substring(g.length-2));const G=n=>{if(!n)return;if(R.current)return;R.current=n;const r=new o.TgdContext(n,e),a=r.gl.getParameter(r.gl.DEPTH_BITS);console.log("Depht buffer bits:",a),T.current=r,E(!0),async function({glb:n,data:e,text:t,image:r}={}){console.log("ðŸš€ [Tgd] glb, data, text, image = ",n,e,t,r);const a={glb:{},data:{},text:{},image:{}},s=[];return r&&Object.keys(r).forEach(n=>{s.push(async()=>{const e=r[n];console.log("Loading image:",e);const t=await(0,o.tgdLoadImage)(e);t&&(a.image[n]=t)})}),n&&Object.keys(n).forEach(e=>{s.push(async()=>{const t=n[e];console.log("Loading GLB:",t);const r=await(0,o.tgdLoadGlb)(t);r&&(a.glb[e]=r)})}),e&&Object.keys(e).forEach(n=>{s.push(async()=>{const t=e[n],r=await(0,o.tgdLoadArrayBuffer)(t);r&&(a.data[n]=r)})}),t&&Object.keys(t).forEach(n=>{s.push(async()=>{const e=t[n],r=await(0,o.tgdLoadText)(e);r&&(a.text[n]=r)})}),await Promise.all(s.map(n=>n())),a}(h).then(n=>{try{t(r,n),r.paint()}catch(n){m(n instanceof Error?n.message:JSON.stringify(n))}E(!1)}).catch(n=>{console.error("Unable to initialize the scene!",n),E(!1)});const s=j.current;s&&s.attachContext(r)},C=n=>{const e=new o.TgdCanvasGizmo({canvas:n});j.current=e,e.eventTipClick.addListener(({to:n})=>{const e=T.current;e&&e.animSchedule({duration:.2,easingFunction:o.tgdEasingFunctionInOutCubic,action:(0,o.tgdActionCreateCameraInterpolation)(e.camera,{orientation:n})})});const t=T.current;t&&e.attachContext(t)};return a.useEffect(()=>{const n=R.current,e=T.current;if(!n||!e)return;const t=new ResizeObserver(()=>e.paint());return t.observe(n),n.requestFullscreen||(n.requestFullscreen=n.webkitRequestFullscreen),w(Boolean(n.requestFullscreen)),()=>t.unobserve(n)},[T.current,R.current]),u?(0,r.jsxs)("div",{ref:y,className:c.screen,style:{width:p?d:g,height:p?g:d},children:[(0,r.jsx)("canvas",{className:c.canvas,ref:G}),l&&(0,r.jsx)("canvas",{className:c.gizmo,ref:C}),f&&(0,r.jsx)("div",{className:c.error,children:f})]}):(0,r.jsxs)("div",{className:s.Sxu.classNames.join(n,c.Tgd),children:[(0,r.jsxs)("div",{className:s.Sxu.classNames.join(c.actions,!B&&c.enabled),children:[(0,r.jsx)("div",{children:(0,r.jsx)(s.I64,{onClick:()=>b(!p)})}),(0,r.jsx)("div",{children:(0,r.jsx)(s.kRc,{onClick:()=>{const n=T.current;n&&n.takeSnapshot().then(n=>{const e=document.createElement("a");document.body.appendChild(e),e.style.display="none",e.href=n.src,e.download="snapshot.png",e.click(),window.setTimeout(()=>document.body.removeChild(e),3e4)})}})}),v&&(0,r.jsx)("div",{children:(0,r.jsx)(s.L9n,{onClick:()=>{const n=y.current;n&&n.requestFullscreen()}})})]}),(0,r.jsxs)("div",{className:c.relative,children:[(0,r.jsxs)("div",{ref:y,className:c.screen,style:{width:p?d:g,height:p?g:d},children:[(0,r.jsx)("canvas",{className:c.canvas,ref:G}),l&&(0,r.jsx)("canvas",{className:c.gizmo,ref:C}),f&&(0,r.jsx)("div",{className:c.error,children:f})]}),(0,r.jsx)("div",{className:s.Sxu.classNames.join(c.overlay,B&&c.loading),children:(0,r.jsx)(i.A,{})}),x]})]})}},8453:(n,e,t)=>{t.d(e,{R:()=>o});var r=t(6540);const a=r.createContext({});function o(n){const e=r.useContext(a);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}}}]);