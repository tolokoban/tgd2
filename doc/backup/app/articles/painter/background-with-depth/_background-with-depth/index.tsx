/**
 * Warning! This code has been generated automatically.
 */
import React from "react"
import { ViewButton } from "@tolokoban/ui"
import CodeViewer from "@/components/demo/CodeViewer"
import Demo from "./background-with-depth.demo"

const FOCUS = {"Initializing WebGL":"\tcontext.camera = assets.glb.background.createCameraByName(\"Camera\");\n\tcontext.camera.far = 100;\n\tconst depthMaker = new TgdPainterState(context, {\n\t\tcull: webglPresetCull.back,\n\t\tchildren: [\n\t\t\ttgdMakeMeshGlbPainter({\n\t\t\t\tcontext,\n\t\t\t\tdata: assets.glb.background,\n\t\t\t\tnode: \"Building\",\n\t\t\t\toverrideMaterial: () => () => new TgdMaterialDepth(),\n\t\t\t}).painter,\n\t\t],\n\t});\n\tconst background = new TgdPainterBackgroundWithDepth(context, {\n\t\tbackground: new TgdTexture2D(context).loadBitmap(assets.image.background),\n\t\tchildren: [depthMaker],\n\t});\n\tconst cube1 = new TgdPainterMesh(context);\n\tcube1.transfo.setPosition(11.02, 0, -8.75).setScale(4);\n\tconst cube2 = new TgdPainterMesh(context);\n\tcube2.transfo.setPosition(0.02, 0, -4).setScale(4);\n\tcontext.add(\n\t\tbackground,\n\t\tnew TgdPainterState(context, {\n\t\t\tdepth: webglPresetDepth.less,\n\t\t\tchildren: [cube1, cube2],\n\t\t}),\n\t\tnew TgdPainterLogic((time) => {\n\t\t\tconst mod = tgdCalcModulo(time * 0.1, 0, 2);\n\t\t\tlet y1 = 0;\n\t\t\tif (mod < 1) y1 = mod * 25;\n\t\t\telse y1 = 25 * (2 - mod);\n\t\t\tconst { x: x1, z: z1 } = cube1.transfo.position;\n\t\t\tcube1.transfo.setPosition(x1, y1, z1);\n\t\t\tcube1.transfo.setEulerRotation(time, time * 47, -time * 120);\n\t\t\tlet y2 = 0;\n\t\t\tif (mod < 1) y2 = mod * 30;\n\t\t\telse y2 = 30 * (2 - mod);\n\t\t\tconst { x: x2, z: z2 } = cube2.transfo.position;\n\t\t\tcube2.transfo.setPosition(x2, y2, z2);\n\t\t\tcube2.transfo.setEulerRotation(time, time * 57, -time * 103);\n\t\t}),\n\t);\n\tcontext.play();"}
const FULL = "import React from \"react\";\nimport { useDebouncedEffect, ViewInputNumber } from \"@tolokoban/ui\";\nimport {\n\ttgdCalcModulo,\n\tTgdContext,\n\ttgdMakeMeshGlbPainter,\n\tTgdMaterialDepth,\n\tTgdPainterBackgroundWithDepth,\n\tTgdPainterLogic,\n\tTgdPainterMesh,\n\tTgdPainterState,\n\tTgdTexture2D,\n\twebglPresetCull,\n\twebglPresetDepth,\n} from \"@tolokoban/tgd\";\n\nimport View, { Assets } from \"@/components/demo/Tgd\";\n\nimport BackgroundIMG from \"./background.webp\";\nimport BackgroundGLB from \"./background.glb\";\n\nfunction init(context: TgdContext, assets: Assets) {\n\tcontext.camera = assets.glb.background.createCameraByName(\"Camera\");\n\tcontext.camera.far = 100;\n\tconst depthMaker = new TgdPainterState(context, {\n\t\tcull: webglPresetCull.back,\n\t\tchildren: [\n\t\t\ttgdMakeMeshGlbPainter({\n\t\t\t\tcontext,\n\t\t\t\tdata: assets.glb.background,\n\t\t\t\tnode: \"Building\",\n\t\t\t\toverrideMaterial: () => () => new TgdMaterialDepth(),\n\t\t\t}).painter,\n\t\t],\n\t});\n\tconst background = new TgdPainterBackgroundWithDepth(context, {\n\t\tbackground: new TgdTexture2D(context).loadBitmap(assets.image.background),\n\t\tchildren: [depthMaker],\n\t});\n\tconst cube1 = new TgdPainterMesh(context);\n\tcube1.transfo.setPosition(11.02, 0, -8.75).setScale(4);\n\tconst cube2 = new TgdPainterMesh(context);\n\tcube2.transfo.setPosition(0.02, 0, -4).setScale(4);\n\tcontext.add(\n\t\tbackground,\n\t\tnew TgdPainterState(context, {\n\t\t\tdepth: webglPresetDepth.less,\n\t\t\tchildren: [cube1, cube2],\n\t\t}),\n\t\tnew TgdPainterLogic((time) => {\n\t\t\tconst mod = tgdCalcModulo(time * 0.1, 0, 2);\n\t\t\tlet y1 = 0;\n\t\t\tif (mod < 1) y1 = mod * 25;\n\t\t\telse y1 = 25 * (2 - mod);\n\t\t\tconst { x: x1, z: z1 } = cube1.transfo.position;\n\t\t\tcube1.transfo.setPosition(x1, y1, z1);\n\t\t\tcube1.transfo.setEulerRotation(time, time * 47, -time * 120);\n\t\t\tlet y2 = 0;\n\t\t\tif (mod < 1) y2 = mod * 30;\n\t\t\telse y2 = 30 * (2 - mod);\n\t\t\tconst { x: x2, z: z2 } = cube2.transfo.position;\n\t\t\tcube2.transfo.setPosition(x2, y2, z2);\n\t\t\tcube2.transfo.setEulerRotation(time, time * 57, -time * 103);\n\t\t}),\n\t);\n\tcontext.play();\n\treturn background;\n}\n\nexport default function Demo() {\n\t//   const [material, setMaterial] = useMaterial();\n\t//   const [min, setMin] = React.useState(material.min);\n\t//   const [max, setMax] = React.useState(material.max);\n\t//   useDebouncedEffect(\n\t//     () => {\n\t//       material.min = min;\n\t//       material.max = max;\n\t//     },\n\t//     [min, max],\n\t//     400\n\t//   );\n\treturn (\n\t\t<View\n\t\t\tonReady={(context, assets) => {\n\t\t\t\tinit(context, assets);\n\t\t\t\t// setMaterial(init(context, assets));\n\t\t\t}}\n\t\t\toptions={{\n\t\t\t\tantialias: false,\n\t\t\t}}\n\t\t\tassets={{\n\t\t\t\tglb: { background: BackgroundGLB },\n\t\t\t\timage: { background: BackgroundIMG },\n\t\t\t}}\n\t\t></View>\n\t);\n}\n\nfunction useMaterial(): [\n\t{ min: number; max: number },\n\t(mat: { min: number; max: number }) => void,\n] {\n\tconst refMaterial = React.useRef<{ min: number; max: number } | null>(null);\n\tif (!refMaterial.current) refMaterial.current = { min: 0.992, max: 1 };\n\n\treturn [\n\t\trefMaterial.current,\n\t\t(mat: { min: number; max: number }) => (refMaterial.current = mat),\n\t];\n}\n"

export default function DemoContainer() {
    const [full, setFull] = React.useState(false)
    return <>
        <div className="half-left"><Demo /></div>
        <div className="half-right">
            <div>
                <ViewButton variant="elevated" onClick={() => setFull(!full)}>
                    {full ? "Show code details" : "Show full code"}
                </ViewButton>
            </div>
            <CodeViewer language="tsx" value={full ? FULL : FOCUS} />
        </div>
    </>
}