/**
 * Warning! This code has been generated automatically.
 */
import React from "react"
import { ViewButton } from "@tolokoban/ui"
import CodeViewer from "@/components/demo/CodeViewer"
import Demo from "./framebuffer.demo"

const FOCUS = {"Detail #1":"\n    context.camera = new TgdCameraPerspective({\n        distance: 0,\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI * 0.25,\n        zoom: 0.333,\n    })\n    new TgdControllerCameraOrbit(context, {\n        speedPanning: 0,\n        inertiaOrbit: 1000,\n    })\n    const framebufferRender = new TgdPainterFramebuffer(context)\n    const framebufferCopy = new TgdPainterFramebuffer(context)\n    const material = new Material()\n    material.texture = context.textures2D.create({\n        image: assets.image.background,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        // cull: webglPresetCull.front,\n        children: [\n            new TgdPainterClear(context, {\n                color: new TgdVec4(),\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                materialFactory: () => material,\n            }),\n        ],\n    })\n    framebufferRender.add(painter)\n    const copy = new TgdPainterFilter(context, {\n        filters: [\n            new TgdFilterHueRotation({\n                hueShiftInDegrees: 90,\n            }),\n        ],\n        texture: framebufferRender.texture,\n    })\n    framebufferCopy.add(copy)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebufferRender.texture,\n        filters: [new TgdFilterZoom({ zoom: 1.1 })],\n        flipY: true,\n    })\n    framebufferRender.onExit = () => {\n        copy.texture = framebufferRender.texture\n    }\n    framebufferCopy.onExit = () => {\n        material.texture = framebufferCopy.texture\n        screen.texture = framebufferCopy.texture\n    }\n    context.add(\n        framebufferRender,\n        framebufferCopy,\n        screen,\n        new TgdPainterLogic((time, delay) => {\n            const { camera } = context\n            camera.orbitAroundY(delay * 0.0001047)\n            // camera.orbitAroundX(delay * 0.00007154)\n            // camera.orbitAroundZ(delay * 0.0003051)\n            // camera.zoom = 0.333 + 0.3 * Math.abs(Math.sin(time * 0.001457))\n        })\n    )\n    context.paint()"}
const FULL = "import {\n    TgdCameraPerspective,\n    TgdContext,\n    TgdControllerCameraOrbit,\n    TgdFilterHueRotation,\n    TgdFilterZoom,\n    TgdPainterClear,\n    TgdPainterFilter,\n    TgdPainterFramebuffer,\n    TgdPainterLogic,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdVec4,\n    webglPresetDepth,\n} from \"@tolokoban/tgd\"\nimport View, { Assets } from \"@/components/demo/Tgd\"\nimport { Material } from \"./material\"\n\nimport VideoURL from \"./fabien.mp4\"\nimport BackgroundURL from \"@/assets/image/dino.webp\"\n\nfunction init(context: TgdContext, assets: Assets) {\n\n    context.camera = new TgdCameraPerspective({\n        distance: 0,\n        far: 100,\n        near: 0.01,\n        fovy: Math.PI * 0.25,\n        zoom: 0.333,\n    })\n    new TgdControllerCameraOrbit(context, {\n        speedPanning: 0,\n        inertiaOrbit: 1000,\n    })\n    const framebufferRender = new TgdPainterFramebuffer(context)\n    const framebufferCopy = new TgdPainterFramebuffer(context)\n    const material = new Material()\n    material.texture = context.textures2D.create({\n        image: assets.image.background,\n    })\n    const painter = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        // cull: webglPresetCull.front,\n        children: [\n            new TgdPainterClear(context, {\n                color: new TgdVec4(),\n                depth: 1,\n            }),\n            new TgdPainterMeshGltf(context, {\n                asset: assets.glb.mesh,\n                materialFactory: () => material,\n            }),\n        ],\n    })\n    framebufferRender.add(painter)\n    const copy = new TgdPainterFilter(context, {\n        filters: [\n            new TgdFilterHueRotation({\n                hueShiftInDegrees: 90,\n            }),\n        ],\n        texture: framebufferRender.texture,\n    })\n    framebufferCopy.add(copy)\n    const screen = new TgdPainterFilter(context, {\n        texture: framebufferRender.texture,\n        filters: [new TgdFilterZoom({ zoom: 1.1 })],\n        flipY: true,\n    })\n    framebufferRender.onExit = () => {\n        copy.texture = framebufferRender.texture\n    }\n    framebufferCopy.onExit = () => {\n        material.texture = framebufferCopy.texture\n        screen.texture = framebufferCopy.texture\n    }\n    context.add(\n        framebufferRender,\n        framebufferCopy,\n        screen,\n        new TgdPainterLogic((time, delay) => {\n            const { camera } = context\n            camera.orbitAroundY(delay * 0.0001047)\n            // camera.orbitAroundX(delay * 0.00007154)\n            // camera.orbitAroundZ(delay * 0.0003051)\n            // camera.zoom = 0.333 + 0.3 * Math.abs(Math.sin(time * 0.001457))\n        })\n    )\n    context.paint()\n}\n\nexport default function Demo() {\n    return (\n        <View\n            onReady={init}\n            assets={{\n                glb: {\n                    mesh: CubeURL,\n                },\n                image: {\n                    background: BackgroundURL,\n                },\n            }}\n        />\n    )\n}\n"

export default function DemoContainer() {
    const [full, setFull] = React.useState(false)
    return <>
        <div className="half-left"><Demo /></div>
        <div className="half-right">
            <div>
                <ViewButton variant="elevated" onClick={() => setFull(!full)}>
                    {full ? "Show code details" : "Show full code"}
                </ViewButton>
            </div>
            <CodeViewer language="tsx" value={full ? FULL : FOCUS} />
        </div>
    </>
}