/**
 * Warning! This code has been generated automatically.
 */
import React from "react"
import { ViewButton } from "@tolokoban/ui"
import CodeViewer from "@/components/demo/CodeViewer"
import Demo from "./framebuffer.demo"

const FOCUS = {"Detail #1":"    const defaultTexture = new TgdTexture2D(context)\n    context.camera = new TgdCameraPerspective({\n        distance: 2,\n        far: 100,\n        near: 0.01,\n        fovy: tgdCalcDegToRad(35),\n        zoom: 1,\n    })\n    new TgdControllerCameraOrbit(context, {\n        speedPanning: 0,\n        inertiaOrbit: 1000,\n        geo: {\n            lat: tgdCalcDegToRad(50),\n            minLat: tgdCalcDegToRad(20),\n            maxLat: tgdCalcDegToRad(80),\n        },\n    })\n    const clear = new TgdPainterClear(context, {\n        color: new TgdVec4(0.4, 0.7, 0.9),\n        depth: 1,\n        stencil: 0,\n    })\n    const mesh = new TgdPainterMeshGltf(context, {\n        asset: assets.glb.world,\n    })\n    const sea = new TgdPainterMesh(context, {\n        geometry: new TgdGeometryPlane({ sizeX: 1, sizeY: 1 }),\n        material: new TgdMaterialSolid({ color: [0, 0, 0.8, 1] }),\n    })\n    const scene = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        children: [\n            new TgdPainterState(context, {\n                cull: webglPresetCull.back,\n                children: [mesh],\n            }),\n            new TgdPainterState(context, {\n                color: false,\n                stencil: webglPresetStencil.write(1),\n                children: [sea],\n            }),\n        ],\n    })\n\n    const framebuffer = new TgdPainterFramebuffer(context, {\n        children: [clear, scene],\n    })\n    const filter = new TgdPainterFilter(context, {\n        flipY: true,\n        filters: [new TgdFilterVerbatim()],\n        texture: framebuffer.textureColor0 ?? defaultTexture,\n    })\n    framebuffer.onExit = () =>\n        (filter.texture = framebuffer.textureColor0 ?? defaultTexture)\n    // context.add(clear, scene)\n    context.add(\n        framebuffer,\n        new TgdPainterClear(context, { color: [0, 1, 0, 1] }),\n        new TgdPainterLogic(() => {\n            // framebuffer.blitStencilBuffer()\n        }),\n        new TgdPainterState(context, {\n            stencil: webglPresetStencil.paintIfEqual(0),\n            children: [filter],\n        }),\n        new TgdPainterDebugStencil(context)\n    )\n    context.paint()"}
const FULL = "import {\n    tgdCalcDegToRad,\n    TgdCameraPerspective,\n    TgdContext,\n    TgdControllerCameraOrbit,\n    TgdFilterVerbatim,\n    TgdGeometryPlane,\n    TgdMaterialSolid,\n    TgdPainterClear,\n    TgdPainterDebugStencil,\n    TgdPainterFilter,\n    TgdPainterFramebuffer,\n    TgdPainterLogic,\n    TgdPainterMesh,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdTexture2D,\n    TgdVec4,\n    webglPresetCull,\n    webglPresetDepth,\n    webglPresetStencil,\n} from \"@tolokoban/tgd\"\nimport View, { Assets } from \"@/components/demo/Tgd\"\n\n// import WorldURL from \"./world.glb\"\nimport WorldURL from \"@/assets/mesh/chinese-chandelier.glb\"\nimport GridURL from \"@/assets/mesh/grid-10x10.glb\"\n\nfunction init(context: TgdContext, assets: Assets) {\n    const defaultTexture = new TgdTexture2D(context)\n    context.camera = new TgdCameraPerspective({\n        distance: 2,\n        far: 100,\n        near: 0.01,\n        fovy: tgdCalcDegToRad(35),\n        zoom: 1,\n    })\n    new TgdControllerCameraOrbit(context, {\n        speedPanning: 0,\n        inertiaOrbit: 1000,\n        geo: {\n            lat: tgdCalcDegToRad(50),\n            minLat: tgdCalcDegToRad(20),\n            maxLat: tgdCalcDegToRad(80),\n        },\n    })\n    const clear = new TgdPainterClear(context, {\n        color: new TgdVec4(0.4, 0.7, 0.9),\n        depth: 1,\n        stencil: 0,\n    })\n    const mesh = new TgdPainterMeshGltf(context, {\n        asset: assets.glb.world,\n    })\n    const sea = new TgdPainterMesh(context, {\n        geometry: new TgdGeometryPlane({ sizeX: 1, sizeY: 1 }),\n        material: new TgdMaterialSolid({ color: [0, 0, 0.8, 1] }),\n    })\n    const scene = new TgdPainterState(context, {\n        depth: webglPresetDepth.less,\n        children: [\n            new TgdPainterState(context, {\n                cull: webglPresetCull.back,\n                children: [mesh],\n            }),\n            new TgdPainterState(context, {\n                color: false,\n                stencil: webglPresetStencil.write(1),\n                children: [sea],\n            }),\n        ],\n    })\n\n    const framebuffer = new TgdPainterFramebuffer(context, {\n        children: [clear, scene],\n    })\n    const filter = new TgdPainterFilter(context, {\n        flipY: true,\n        filters: [new TgdFilterVerbatim()],\n        texture: framebuffer.textureColor0 ?? defaultTexture,\n    })\n    framebuffer.onExit = () =>\n        (filter.texture = framebuffer.textureColor0 ?? defaultTexture)\n    // context.add(clear, scene)\n    context.add(\n        framebuffer,\n        new TgdPainterClear(context, { color: [0, 1, 0, 1] }),\n        new TgdPainterLogic(() => {\n            // framebuffer.blitStencilBuffer()\n        }),\n        new TgdPainterState(context, {\n            stencil: webglPresetStencil.paintIfEqual(0),\n            children: [filter],\n        }),\n        new TgdPainterDebugStencil(context)\n    )\n    context.paint()\n}\n\nexport default function Demo() {\n    return (\n        <View\n            options={{ antialias: true, stencil: true, depth: true }}\n            onReady={init}\n            assets={{\n                glb: {\n                    world: WorldURL,\n                    see: GridURL,\n                },\n            }}\n        />\n    )\n}\n"

export default function DemoContainer() {
    const [full, setFull] = React.useState(false)
    return <>
        <div className="half-left"><Demo /></div>
        <div className="half-right">
            <div>
                <ViewButton variant="elevated" onClick={() => setFull(!full)}>
                    {full ? "Show code details" : "Show full code"}
                </ViewButton>
            </div>
            <CodeViewer language="tsx" value={full ? FULL : FOCUS} />
        </div>
    </>
}