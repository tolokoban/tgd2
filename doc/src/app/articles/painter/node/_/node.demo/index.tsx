/**
 * Warning! This code has been generated automatically.
 */
import React from "react"
import { ViewButton } from "@tolokoban/ui"
import CodeViewer from "@/components/demo/CodeViewer"
import Demo from "./node.demo"

const FOCUS = {"Detail #1":"    ctx.camera.transfo.setPosition(0, -5, 0).distance = 30\n    new TgdControllerCameraOrbit(ctx)\n    const createBox = () =>\n        new TgdPainterNode({\n            transfo: {\n                position: [0, -1, 0],\n            },\n            children: [\n                new TgdPainterNode({\n                    transfo: {\n                        position: [0, -0.5, -0.5],\n                    },\n                    children: [\n                        new TgdPainterMesh(ctx, {\n                            geometry: new TgdGeometryBox(),\n                            material: new TgdMaterialDiffuse({\n                                color: new TgdTexture2D(ctx).loadBitmap(\n                                    WoodURL,\n                                    { generateMipmap: true }\n                                ),\n                            }),\n                        }),\n                    ],\n                }),\n            ],\n        })\n    let root = createBox()\n    const boxes: TgdPainterNode[] = [root]\n    for (let i = 0; i < 31; i++) {\n        const box = createBox()\n        boxes.push(box)\n        box.add(root)\n        root = box\n    }\n    ctx.add(\n        new TgdPainterClear(ctx, { color: [0.2, 0.1, 0, 1], depth: 1 }),\n        new TgdPainterState(ctx, {\n            depth: webglPresetDepth.less,\n            children: [root],\n        }),\n        new TgdPainterLogic((time, delay) => {\n            for (const box of boxes) {\n                box.transfo.orientation.reset()\n                const s = 0.95\n                box.transfo.setScale(s, s, s)\n                box.transfo.orbitAroundX(\n                    (Math.abs(Math.sin(time)) * Math.PI * 2) / boxes.length\n                )\n                box.transfo.orbitAroundY(\n                    (Math.sin(time * 1.1287) *\n                        Math.PI *\n                        3 *\n                        (1 + Math.cos(time * 0.37243))) /\n                        boxes.length\n                )\n            }\n            root.transfo.orbitAroundY(time * 0.5)\n        })\n    )\n    ctx.play()"}
const FULL = "import {\n    TgdContext,\n    TgdControllerCameraOrbit,\n    TgdGeometryBox,\n    TgdMaterialDiffuse,\n    TgdMaterialNormals,\n    TgdPainterClear,\n    TgdPainterLogic,\n    TgdPainterMesh,\n    TgdPainterNode,\n    TgdPainterState,\n    TgdTexture2D,\n    webglPresetDepth,\n} from \"@tolokoban/tgd\"\nimport View from \"@/components/demo/Tgd\"\nimport WoodURL from \"./wood.webp\"\n\nfunction init(ctx: TgdContext) {\n    ctx.camera.transfo.setPosition(0, -5, 0).distance = 30\n    new TgdControllerCameraOrbit(ctx)\n    const createBox = () =>\n        new TgdPainterNode({\n            transfo: {\n                position: [0, -1, 0],\n            },\n            children: [\n                new TgdPainterNode({\n                    transfo: {\n                        position: [0, -0.5, -0.5],\n                    },\n                    children: [\n                        new TgdPainterMesh(ctx, {\n                            geometry: new TgdGeometryBox(),\n                            material: new TgdMaterialDiffuse({\n                                color: new TgdTexture2D(ctx).loadBitmap(\n                                    WoodURL,\n                                    { generateMipmap: true }\n                                ),\n                            }),\n                        }),\n                    ],\n                }),\n            ],\n        })\n    let root = createBox()\n    const boxes: TgdPainterNode[] = [root]\n    for (let i = 0; i < 31; i++) {\n        const box = createBox()\n        boxes.push(box)\n        box.add(root)\n        root = box\n    }\n    ctx.add(\n        new TgdPainterClear(ctx, { color: [0.2, 0.1, 0, 1], depth: 1 }),\n        new TgdPainterState(ctx, {\n            depth: webglPresetDepth.less,\n            children: [root],\n        }),\n        new TgdPainterLogic((time, delay) => {\n            for (const box of boxes) {\n                box.transfo.orientation.reset()\n                const s = 0.95\n                box.transfo.setScale(s, s, s)\n                box.transfo.orbitAroundX(\n                    (Math.abs(Math.sin(time)) * Math.PI * 2) / boxes.length\n                )\n                box.transfo.orbitAroundY(\n                    (Math.sin(time * 1.1287) *\n                        Math.PI *\n                        3 *\n                        (1 + Math.cos(time * 0.37243))) /\n                        boxes.length\n                )\n            }\n            root.transfo.orbitAroundY(time * 0.5)\n        })\n    )\n    ctx.play()\n}\n\nexport default function Demo() {\n    return <View onReady={init} />\n}\n"

export default function DemoContainer() {
    const [full, setFull] = React.useState(false)
    return <>
        <div className="half-left"><Demo /></div>
        <div className="half-right">
            <div>
                <ViewButton variant="elevated" onClick={() => setFull(!full)}>
                    {full ? "Show code details" : "Show full code"}
                </ViewButton>
            </div>
            <CodeViewer language="tsx" value={full ? FULL : FOCUS} />
        </div>
    </>
}