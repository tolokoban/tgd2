/**
 * Warning! This code has been generated automatically.
 */
import React from "react"
import { ViewButton } from "@tolokoban/ui"
import CodeViewer from "@/components/demo/CodeViewer"
import Demo from "./Shield.demo"

const FOCUS = {"Initialising WebGL":"async function init(context: TgdContext) {\n    const asset = await tgdLoadGlb(AssetGlb)\n    if (!asset) throw Error(`Unable to load GLB file: ${AssetGlb}`)\n\n    const background = await tgdLoadImage(AssetBackground)\n    if (!background)\n        throw Error(`Unable to load image file: ${AssetBackground}`)\n\n    const w = 4096\n    const h = w\n    const { canvas, ctx } = tgdCanvasCreateWithContext2D(w, h)\n    const holes = context.textures2D.create({\n        image: canvas,\n    })\n    ctx.clearRect(0, 0, w, h)\n    let count = 0\n    window.setInterval(() => {\n        if (count > 59) {\n            ctx.clearRect(0, 0, w, h)\n            count = 0\n            return\n        }\n\n        count++\n        ctx.fillStyle = \"#fff\"\n        const x = Math.random() * w\n        const y = Math.random() * h\n        const r = 50 + 400 * Math.random()\n        ctx.beginPath()\n        ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2)\n        ctx.fill()\n        holes.loadImage(canvas)\n        context.paint()\n    }, 500)\n    context.camera.distance = 2.5\n    const painter = new TgdPainterMeshGltf(context, {\n        asset,\n        materialFactory: ({ color }: { color?: TgdTexture2D }) => {\n            if (!color) throw Error(\"No abedo provided!\")\n\n            return new MaterialHole({ abedo: color, holes })\n        },\n    })\n    const orbiter = new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 500,\n    })\n    context.add(\n        new TgdPainterState(context, {\n            depth: webglPresetDepth.less,\n            blend: webglPresetBlend.alpha,\n            children: [\n                new TgdPainterClear(context, {\n                    color: new TgdVec4(0.5, 0.5, 0.5, 1),\n                    depth: 1,\n                }),\n                new TgdPainterBackground(\n                    context,\n                    context.textures2D.create({\n                        image: background,\n                    })\n                ),\n                painter,\n            ],\n        })\n    )\n    painter.paint()\n    context.canvas.addEventListener(\"dblclick\", () => {\n        orbiter.reset(300)\n    })\n}"}
const FULL = "import * as React from \"react\"\nimport { Theme, CommonProps, styleCommon } from \"@tolokoban/ui\"\nimport {\n    tgdCanvasCreateWithContext2D,\n    TgdContext,\n    TgdControllerCameraOrbit,\n    tgdLoadGlb,\n    tgdLoadImage,\n    TgdMaterial,\n    TgdPainterBackground,\n    TgdPainterClear,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdProgram,\n    TgdTexture2D,\n    TgdVec3,\n    TgdVec4,\n    WebglAttributeType,\n    webglPresetBlend,\n    webglPresetDepth,\n    WebglUniformType,\n} from \"@tolokoban/tgd\"\n\nimport View from \"@/components/demo/Tgd\"\nimport AssetGlb from \"../assets/shield.glb\"\nimport AssetBackground from \"../assets/background.png\"\n\nexport default function ViewShield(): JSX.Element {\n    return <View onReady={init} />\n}\n\nasync function init(context: TgdContext) {\n    const asset = await tgdLoadGlb(AssetGlb)\n    if (!asset) throw Error(`Unable to load GLB file: ${AssetGlb}`)\n\n    const background = await tgdLoadImage(AssetBackground)\n    if (!background)\n        throw Error(`Unable to load image file: ${AssetBackground}`)\n\n    const w = 4096\n    const h = w\n    const { canvas, ctx } = tgdCanvasCreateWithContext2D(w, h)\n    const holes = context.textures2D.create({\n        image: canvas,\n    })\n    ctx.clearRect(0, 0, w, h)\n    let count = 0\n    window.setInterval(() => {\n        if (count > 59) {\n            ctx.clearRect(0, 0, w, h)\n            count = 0\n            return\n        }\n\n        count++\n        ctx.fillStyle = \"#fff\"\n        const x = Math.random() * w\n        const y = Math.random() * h\n        const r = 50 + 400 * Math.random()\n        ctx.beginPath()\n        ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2)\n        ctx.fill()\n        holes.loadImage(canvas)\n        context.paint()\n    }, 500)\n    context.camera.distance = 2.5\n    const painter = new TgdPainterMeshGltf(context, {\n        asset,\n        materialFactory: ({ color }: { color?: TgdTexture2D }) => {\n            if (!color) throw Error(\"No abedo provided!\")\n\n            return new MaterialHole({ abedo: color, holes })\n        },\n    })\n    const orbiter = new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 500,\n    })\n    context.add(\n        new TgdPainterState(context, {\n            depth: webglPresetDepth.less,\n            blend: webglPresetBlend.alpha,\n            children: [\n                new TgdPainterClear(context, {\n                    color: new TgdVec4(0.5, 0.5, 0.5, 1),\n                    depth: 1,\n                }),\n                new TgdPainterBackground(\n                    context,\n                    context.textures2D.create({\n                        image: background,\n                    })\n                ),\n                painter,\n            ],\n        })\n    )\n    painter.paint()\n    context.canvas.addEventListener(\"dblclick\", () => {\n        orbiter.reset(300)\n    })\n}\n\n// //#region MaterialHole\ninterface MaterialHoleOptions {\n    abedo: TgdTexture2D\n    holes: TgdTexture2D\n}\n\nclass MaterialHole implements TgdMaterial {\n    private readonly lightDirection = new TgdVec3(0.1, 0.2, 1)\n\n    public readonly varyings: { [name: string]: WebglAttributeType } = {\n        varNormal: \"vec3\",\n        varUV: \"vec2\",\n    }\n    public readonly uniforms: { [name: string]: WebglUniformType } = {\n        texAbedo: \"sampler2D\",\n        texHoles: \"sampler2D\",\n        uniLightDir: \"vec3\",\n    }\n    public readonly fragmentShaderCode = [\n        \"vec3 normal = normalize(varNormal);\",\n        `float light = abs(dot(normal, uniLightDir));`,\n        `light = pow(light, 9.0) * 0.9;`,\n        `light += 0.2;`,\n        `vec3 color = texture(texAbedo, varUV).rgb;`,\n        `float spec = max(0.0, reflect(uniLightDir, normal).z);`,\n        `spec = pow(spec, 20.0);`,\n        `vec3 holes = texture(texHoles, varUV).rgb;`,\n        `if (holes.r > 0.99) discard;`,\n        `return vec4(color * light + spec + holes * 0.25, 1.0 - holes.r);`,\n    ]\n    public readonly vertexShaderCode = [\n        \"varNormal = mat3(uniModelViewMatrix) * NORMAL;\",\n        \"varUV = TEXCOORD_0;\",\n    ]\n\n    constructor(private readonly options: MaterialHoleOptions) {}\n\n    setUniforms(program: TgdProgram): void {\n        program.uniform3fv(\"uniLightDir\", this.lightDirection)\n\n        this.options.abedo.activate(program, \"texAbedo\", 0)\n        this.options.holes.activate(program, \"texHoles\", 1)\n    }\n}\n//#endregion\n"

export default function DemoContainer() {
    const [full, setFull] = React.useState(false)
    return <>
        <div className="half-left"><Demo /></div>
        <div className="half-right">
            <div>
                <ViewButton variant="elevated" onClick={() => setFull(!full)}>
                    {full ? "Show code details" : "Show full code"}
                </ViewButton>
            </div>
            <CodeViewer language="tsx" value={full ? FULL : FOCUS} />
        </div>
    </>
}