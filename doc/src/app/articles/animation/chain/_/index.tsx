/**
 * Warning! This code has been generated automatically.
 */
import React from "react"
import { ViewButton } from "@tolokoban/ui"
import CodeViewer from "@/components/demo/CodeViewer"
import Demo from "./chain.demo"

const FOCUS = {"Detail #1":"    ctx.camera.transfo.distance = 10\n    const cube = new TgdPainterMesh(ctx, { transfo: { position: [-1, -1, 0] } })\n    ctx.add(\n        new TgdPainterClear(ctx, { color: [0.4, 0.2, 0, 1] }),\n        new TgdPainterState(ctx, {\n            depth: webglPresetDepth.lessOrEqual,\n            children: [\n                cube,\n                new TgdPainterMesh(ctx, {\n                    material: new TgdMaterialFlat({\n                        color: [0.5, 0.5, 0.5, 1],\n                    }),\n                    transfo: { position: [0, 0, -0.1] },\n                }),\n            ],\n        })\n    )\n    const anim1: TgdAnimation = {\n        duration: 1,\n        easingFunction: tgdEasingFunctionInOutCubic,\n        action(t) {\n            cube.transfo.setPosition(-1, t * 2 - 1, 0)\n        },\n    }\n    const anim2: TgdAnimation = {\n        duration: 1,\n        easingFunction: tgdEasingFunctionInOutCubic,\n        action(t) {\n            cube.transfo.setPosition(t * 2 - 1, 1, 0)\n        },\n    }\n    const anim3: TgdAnimation = {\n        duration: 1,\n        easingFunction: tgdEasingFunctionInOutCubic,\n        action(t) {\n            cube.transfo.setPosition(+1, 1 - t * 2, 0)\n        },\n    }\n    const anim4: TgdAnimation = {\n        duration: 1,\n        easingFunction: tgdEasingFunctionInOutCubic,\n        action(t) {\n            cube.transfo.setPosition(1 - t * 2, -1, 0)\n        },\n    }\n    ctx.animSchedule(\n        tgdAnimChain([anim1, anim2, anim3, anim4], {\n            repeat: Infinity,\n        })\n    )\n    ctx.animSchedule(\n        tgdAnimChain(\n            [\n                {\n                    duration: 0.5,\n                    action(t) {\n                        cube.transfo.setScale(1 - t * 0.5)\n                    },\n                },\n                {\n                    duration: 0.5,\n                    action(t) {\n                        cube.transfo.setScale(1 - (1 - t) * 0.5)\n                    },\n                },\n            ],\n            { repeat: Infinity }\n        )\n    )\n    ctx.paint()"}
const FULL = "import {\n    TgdAnimation,\n    tgdAnimChain,\n    TgdContext,\n    tgdEasingFunctionInOutCubic,\n    TgdMaterialFlat,\n    TgdPainterClear,\n    TgdPainterMesh,\n    TgdPainterState,\n    webglPresetDepth,\n} from \"@tolokoban/tgd\"\nimport View from \"@/components/demo/Tgd\"\n\nfunction init(ctx: TgdContext) {\n    ctx.camera.transfo.distance = 10\n    const cube = new TgdPainterMesh(ctx, { transfo: { position: [-1, -1, 0] } })\n    ctx.add(\n        new TgdPainterClear(ctx, { color: [0.4, 0.2, 0, 1] }),\n        new TgdPainterState(ctx, {\n            depth: webglPresetDepth.lessOrEqual,\n            children: [\n                cube,\n                new TgdPainterMesh(ctx, {\n                    material: new TgdMaterialFlat({\n                        color: [0.5, 0.5, 0.5, 1],\n                    }),\n                    transfo: { position: [0, 0, -0.1] },\n                }),\n            ],\n        })\n    )\n    const anim1: TgdAnimation = {\n        duration: 1,\n        easingFunction: tgdEasingFunctionInOutCubic,\n        action(t) {\n            cube.transfo.setPosition(-1, t * 2 - 1, 0)\n        },\n    }\n    const anim2: TgdAnimation = {\n        duration: 1,\n        easingFunction: tgdEasingFunctionInOutCubic,\n        action(t) {\n            cube.transfo.setPosition(t * 2 - 1, 1, 0)\n        },\n    }\n    const anim3: TgdAnimation = {\n        duration: 1,\n        easingFunction: tgdEasingFunctionInOutCubic,\n        action(t) {\n            cube.transfo.setPosition(+1, 1 - t * 2, 0)\n        },\n    }\n    const anim4: TgdAnimation = {\n        duration: 1,\n        easingFunction: tgdEasingFunctionInOutCubic,\n        action(t) {\n            cube.transfo.setPosition(1 - t * 2, -1, 0)\n        },\n    }\n    ctx.animSchedule(\n        tgdAnimChain([anim1, anim2, anim3, anim4], {\n            repeat: Infinity,\n        })\n    )\n    ctx.animSchedule(\n        tgdAnimChain(\n            [\n                {\n                    duration: 0.5,\n                    action(t) {\n                        cube.transfo.setScale(1 - t * 0.5)\n                    },\n                },\n                {\n                    duration: 0.5,\n                    action(t) {\n                        cube.transfo.setScale(1 - (1 - t) * 0.5)\n                    },\n                },\n            ],\n            { repeat: Infinity }\n        )\n    )\n    ctx.paint()\n}\n\nexport default function Demo() {\n    return <View onReady={init} />\n}\n"

export default function DemoContainer() {
    const [full, setFull] = React.useState(false)
    return <>
        <div className="half-left"><Demo /></div>
        <div className="half-right">
            <div>
                <ViewButton variant="elevated" onClick={() => setFull(!full)}>
                    {full ? "Show code details" : "Show full code"}
                </ViewButton>
            </div>
            <CodeViewer language="tsx" value={full ? FULL : FOCUS} />
        </div>
    </>
}