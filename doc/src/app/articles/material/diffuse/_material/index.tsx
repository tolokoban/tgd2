/**
 * Warning! This code has been generated automatically.
 */
import React from "react"
import { ViewButton } from "@tolokoban/ui"
import CodeViewer from "@/components/demo/CodeViewer"
import Demo from "./_material.demo"

const FOCUS = {
    "Initializing WebGL":
        "    const color: ArrayNumber4 = [...tgdCalcRandom3(), 1]\n    const material1 = new TgdMaterialDiffuse({\n        color,\n        ambient: new TgdLight({\n            color: [0.8, 0.8, 0.8, 0],\n        }),\n    })\n    const mesh1 = new TgdPainterMeshGltf(context, {\n        asset: assets.glb.suzane,\n        material: material1,\n    })\n    const material2 = new TgdMaterialDiffuse({\n        color,\n        lockLightsToCamera: true,\n        ambient: new TgdLight({\n            color: [0.8, 0.8, 0.8, 0],\n        }),\n    })\n    const mesh2 = new TgdPainterMeshGltf(context, {\n        asset: assets.glb.suzane,\n        material: material2,\n    })",
}
const FULL =
    'import {\n    ArrayNumber4,\n    TgdContext,\n    TgdControllerCameraOrbit,\n    TgdLight,\n    TgdMaterialDiffuse,\n    TgdPainterClear,\n    TgdPainterMeshGltf,\n    TgdPainterState,\n    TgdPainterScissor,\n    tgdCalcRandom3,\n    webglPresetDepth,\n    tgdCalcClamp,\n} from "@tolokoban/tgd"\nimport View, { Assets } from "@/components/demo/Tgd"\nimport SuzaneURL from "@/assets/mesh/suzanne.glb"\nimport React from "react"\nimport { useFloat } from "@/utils/hooks/float"\nimport {\n    ViewButton,\n    ViewInputNumber,\n    ViewPanel,\n    ViewSlider,\n} from "@tolokoban/ui"\n\nfunction init(context: TgdContext, assets: Assets) {\n    const color: ArrayNumber4 = [...tgdCalcRandom3(), 1]\n    const material1 = new TgdMaterialDiffuse({\n        color,\n        ambient: new TgdLight({\n            color: [0.8, 0.8, 0.8, 0],\n        }),\n    })\n    const mesh1 = new TgdPainterMeshGltf(context, {\n        asset: assets.glb.suzane,\n        material: material1,\n    })\n    const material2 = new TgdMaterialDiffuse({\n        color,\n        lockLightsToCamera: true,\n        ambient: new TgdLight({\n            color: [0.8, 0.8, 0.8, 0],\n        }),\n    })\n    const mesh2 = new TgdPainterMeshGltf(context, {\n        asset: assets.glb.suzane,\n        material: material2,\n    })\n    const scissor1 = new TgdPainterScissor(context, {\n        children: [mesh1],\n        x: 0,\n        y: 0,\n        width: 0.5,\n        height: 1,\n    })\n    const scissor2 = new TgdPainterScissor(context, {\n        children: [mesh2],\n        x: 0.5,\n        y: 0,\n        width: 0.5,\n        height: 1,\n    })\n    context.add(\n        new TgdPainterClear(context, {\n            color: [0.3, 0.3, 0.3, 1],\n            depth: 1,\n        }),\n        new TgdPainterState(context, {\n            depth: webglPresetDepth.less,\n            children: [scissor1, scissor2],\n        })\n    )\n    context.paint()\n    new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 2000,\n    })\n    return {\n        specularExponent(value: number) {\n            material1.specularExponent = value\n            material2.specularExponent = value\n            context.paint()\n        },\n        specularIntensity(value: number) {\n            material1.specularIntensity = value\n            material2.specularIntensity = value\n            context.paint()\n        },\n        split(value: number) {\n            const a = tgdCalcClamp(value, 0, 1)\n            scissor1.x = 0\n            scissor1.width = a\n            scissor2.x = a\n            scissor2.width = 1 - a\n            context.paint()\n        },\n    }\n}\n\nexport default function Demo() {\n    const ref = React.useRef<ReturnType<typeof init> | null>(null)\n    const srv = ref.current\n    const [specularExponent, setSpecularExponent] = useFloat(\n        20,\n        srv?.specularExponent\n    )\n    const [specularIntensity, setSpecularIntensity] = useFloat(\n        1,\n        srv?.specularIntensity\n    )\n    const [split, setSplit] = useFloat(0.5, srv?.split)\n    return (\n        <div>\n            <View\n                onReady={(scene: TgdContext, assets: Assets) => {\n                    ref.current = init(scene, assets)\n                }}\n                assets={{\n                    glb: {\n                        suzane: SuzaneURL,\n                    },\n                }}\n                gizmo\n            >\n                <ViewSlider\n                    value={split}\n                    onChange={setSplit}\n                    min={0}\n                    max={1}\n                    step={1e-2}\n                />\n                <ViewPanel\n                    display="flex"\n                    justifyContent="space-around"\n                    alignItems="center"\n                >\n                    <ViewInputNumber\n                        label="specularExponent"\n                        value={specularExponent}\n                        onChange={setSpecularExponent}\n                    />\n                    <ViewInputNumber\n                        label="specularIntensity"\n                        value={specularIntensity}\n                        onChange={setSpecularIntensity}\n                    />\n                </ViewPanel>\n                <ViewPanel\n                    display="flex"\n                    justifyContent="space-around"\n                    alignItems="center"\n                >\n                    <ViewButton\n                        variant="text"\n                        color="primary-5"\n                        onClick={() => {\n                            setSpecularExponent(1)\n                            setSpecularIntensity(0.5)\n                        }}\n                    >\n                        Brushed Metal\n                    </ViewButton>\n                    <ViewButton\n                        variant="text"\n                        color="primary-5"\n                        onClick={() => {\n                            setSpecularExponent(0.25)\n                            setSpecularIntensity(0.125)\n                        }}\n                    >\n                        Soft Light\n                    </ViewButton>\n                    <ViewButton\n                        variant="text"\n                        color="primary-5"\n                        onClick={() => {\n                            setSpecularExponent(50)\n                            setSpecularIntensity(2)\n                        }}\n                    >\n                        Car Paint\n                    </ViewButton>\n                    <ViewButton\n                        variant="text"\n                        color="primary-5"\n                        onClick={() => {\n                            setSpecularIntensity(0)\n                        }}\n                    >\n                        Plastic\n                    </ViewButton>\n                </ViewPanel>\n            </View>\n        </div>\n    )\n}\n'

export default function DemoContainer() {
    const [full, setFull] = React.useState(false)
    return (
        <>
            <div className="half-left">
                <Demo />
            </div>
            <div className="half-right">
                <div>
                    <ViewButton
                        variant="elevated"
                        onClick={() => setFull(!full)}
                    >
                        {full ? "Show code details" : "Show full code"}
                    </ViewButton>
                </div>
                <CodeViewer language="tsx" value={full ? FULL : FOCUS} />
            </div>
        </>
    )
}
