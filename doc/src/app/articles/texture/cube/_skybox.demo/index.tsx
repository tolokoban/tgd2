/**
 * Warning! This code has been generated automatically.
 */
import React from "react"
import { ViewButton } from "@tolokoban/ui"
import CodeViewer from "@/components/demo/CodeViewer"
import Demo from "./skybox.demo"

const FOCUS = {"Detail #1":"    const camera = new TgdCameraPerspective({\n        transfo: {\n            distance: 6,\n        },\n    })\n    context.camera = camera\n    new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 1000,\n    })\n    context.camera.debug()\n    const skybox = new TgdPainterSkybox(context, {\n        camera: context.camera,\n        imagePosX: assets.image.imagePosX,\n        imagePosY: assets.image.imagePosY,\n        imagePosZ: assets.image.imagePosZ,\n        imageNegX: assets.image.imageNegX,\n        imageNegY: assets.image.imageNegY,\n        imageNegZ: assets.image.imageNegZ,\n    })\n    const clear = new TgdPainterClear(context, {\n        depth: 1,\n    })\n    const cube = new TgdPainterMesh(context)\n    const axes = new TgdPainterAxes(context, { scale: 3 })\n    const state = new TgdPainterState(context, {\n        depth: webglPresetDepth.lessOrEqual,\n        children: [axes, cube, skybox],\n    })\n    context.add(clear, state)\n    context.paint()\n    return { camera }"}
const FULL = "import React from \"react\"\nimport {\n    tgdActionCreateTransfoInterpolation,\n    TgdCamera,\n    TgdCameraPerspective,\n    TgdContext,\n    TgdControllerCameraOrbit,\n    tgdEasingFunctionInOutBounce,\n    tgdEasingFunctionInOutCubic,\n    TgdGeometryBox,\n    TgdMat3,\n    TgdPainterAxes,\n    TgdPainterClear,\n    TgdPainterLogic,\n    TgdPainterMesh,\n    TgdPainterSkybox,\n    TgdPainterState,\n    TgdQuat,\n    TgdQuatFace,\n    TgdTransfo,\n    TgdVec3,\n    webglPresetDepth,\n} from \"@tolokoban/tgd\"\n\nimport View, { Assets } from \"@/components/demo/Tgd\"\nimport { ViewButton } from \"@tolokoban/ui\"\n\nimport imagePosX from \"./posX.webp\" // +X\nimport imagePosY from \"./posY.webp\" // +Y\nimport imagePosZ from \"./posZ.webp\" // +Z\nimport imageNegX from \"./negX.webp\" // -X\nimport imageNegY from \"./negY.webp\" // -Y\nimport imageNegZ from \"./negZ.webp\" // -Z\n\nimport styles from \"./skybox.demo.module.css\"\n\nfunction init(\n    context: TgdContext,\n    assets: Assets\n): {\n    camera: TgdCamera\n} {\n    const camera = new TgdCameraPerspective({\n        transfo: {\n            distance: 6,\n        },\n    })\n    context.camera = camera\n    new TgdControllerCameraOrbit(context, {\n        inertiaOrbit: 1000,\n    })\n    context.camera.debug()\n    const skybox = new TgdPainterSkybox(context, {\n        camera: context.camera,\n        imagePosX: assets.image.imagePosX,\n        imagePosY: assets.image.imagePosY,\n        imagePosZ: assets.image.imagePosZ,\n        imageNegX: assets.image.imageNegX,\n        imageNegY: assets.image.imageNegY,\n        imageNegZ: assets.image.imageNegZ,\n    })\n    const clear = new TgdPainterClear(context, {\n        depth: 1,\n    })\n    const cube = new TgdPainterMesh(context)\n    const axes = new TgdPainterAxes(context, { scale: 3 })\n    const state = new TgdPainterState(context, {\n        depth: webglPresetDepth.lessOrEqual,\n        children: [axes, cube, skybox],\n    })\n    context.add(clear, state)\n    context.paint()\n    return { camera }\n}\n\nexport default function Demo() {\n    const [camera, setCamera] = React.useState<TgdCamera | null>(null)\n    const refContext = React.useRef<TgdContext | null>(null)\n    const handleReady = (context: TgdContext, assets: Assets) => {\n        const resources = init(context, assets)\n        setCamera(resources.camera)\n        refContext.current = context\n    }\n    const face = (value: TgdQuatFace) => {\n        const context = refContext.current\n        if (!camera || !context) return\n\n        const orientation = TgdQuat.fromFace(value)\n        context.animSchedule({\n            action: tgdActionCreateTransfoInterpolation(\n                camera.transfo,\n                {},\n                {\n                    orientation,\n                }\n            ),\n            duration: 0.3,\n            easingFunction: tgdEasingFunctionInOutCubic,\n        })\n    }\n    return (\n        <View\n            className={styles.skybox}\n            gizmo\n            onReady={handleReady}\n            assets={{\n                image: {\n                    imagePosX,\n                    imagePosY,\n                    imagePosZ,\n                    imageNegX,\n                    imageNegY,\n                    imageNegZ,\n                },\n            }}\n        >\n            <footer className={styles.footer}>\n                <ViewButton onClick={() => face(\"+X+Y+Z\")}>Reset</ViewButton>\n                <ViewButton onClick={() => face(\"-Z-Y-X\")}>+X</ViewButton>\n                <ViewButton onClick={() => face(\"+X+Z-Y\")}>+Y</ViewButton>\n                <ViewButton onClick={() => face(\"+X-Y-Z\")}>+Z</ViewButton>\n                <ViewButton onClick={() => face(\"+Z-Y+X\")}>-X</ViewButton>\n                <ViewButton onClick={() => face(\"+X-Z+Y\")}>-Y</ViewButton>\n                <ViewButton onClick={() => face(\"-X-Y+Z\")}>-Z</ViewButton>\n            </footer>\n        </View>\n    )\n}\n"

export default function DemoContainer() {
    const [full, setFull] = React.useState(false)
    return <>
        <div className="half-left"><Demo /></div>
        <div className="half-right">
            <div>
                <ViewButton variant="elevated" onClick={() => setFull(!full)}>
                    {full ? "Show code details" : "Show full code"}
                </ViewButton>
            </div>
            <CodeViewer language="tsx" value={full ? FULL : FOCUS} />
        </div>
    </>
}